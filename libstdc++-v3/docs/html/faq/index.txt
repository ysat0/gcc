
                     libstdc++ Frequently Asked Questions

   The   latest   version   of  this  document  is  always  available  at
   [1]http://gcc.gnu.org/onlinedocs/libstdc++/faq/.

   To the [2]libstdc++-v3 homepage.
     _________________________________________________________________

                                   Questions

    1. [3]General Information
         1. [4]What is libstdc++-v3?
         2. [5]Why should I use libstdc++?
         3. [6]Who's in charge of it?
         4. [7]How do I get libstdc++?
         5. [8]When is libstdc++ going to be finished?
         6. [9]How do I contribute to the effort?
         7. [10]What happened to libg++? I need that!
         8. [11]What if I have more questions?
    2. [12]Installation
         1. [13]How do I install libstdc++-v3?
         2. [14][removed]
         3. [15]What is this CVS thing that you keep mentioning?
         4. [16]How do I know if it works?
    3. [17]Platform-Specific Issues
         1. [18]Can libstdc++-v3 be used with <my favorite compiler>?
         2. [19][removed]
         3. [20]Building under DEC OSF kills the assembler
    4. [21]Known Bugs and Non-Bugs
         1. [22]What works already?
         2. [23]Bugs in gcc/g++ (not libstdc++-v3)
         3. [24]Bugs in the C++ language/lib specification
         4. [25]Things in libstdc++ that look like bugs
               o [26]-Weffc++ complains too much
               o [27]"ambiguous  overloads"  after including an old-style
                 header
               o [28]The g++-3 headers are not ours
               o [29]compilation errors from streambuf.h
               o [30]errors about *Cconcept and constraints in the STL...
         5. [31]Aw, that's easy to fix!
    5. [32]Miscellaneous
         1. [33]string::iterator is not char*; vector<T>::iterator is not
            T*
         2. [34]What's next after libstdc++-v3?
         3. [35]What about the STL from SGI?
         4. [36]Extensions and Backward Compatibility
         5. [37][removed]
         6. [38]Is libstdc++-v3 thread-safe?
         7. [39]How do I get a copy of the ISO C++ Standard?
     _________________________________________________________________

                            1.0 General Information

1.1 What is libstdc++-v3?

   The  GNU  Standard  C++  Library  v3, or libstdc++-2.9x, is an ongoing
   project  to  implement the ISO 14882 Standard C++ library as described
   in  chapters  17 through 27 and annex D. As the library reaches stable
   plateaus,  it  is  captured  in  a  snapshot and released. The current
   release  is  [40]the  eleventh  snapshot.  For  those  who want to see
   exactly  how  far  the  project  has  come,  or  just  want the latest
   bleeding-edge  code, the up-to-date source is available over anonymous
   CVS, and can even be browsed over the Web (see below).

   A more formal description of the V3 goals can be found in the official
   [41]design document.
     _________________________________________________________________

1.2 Why should I use libstdc++?

   The completion of the ISO C++ standardization gave the C++ community a
   powerful  set  of  reuseable  tools  in  the  form of the C++ Standard
   Library.  However,  all existing C++ implementations are (as the Draft
   Standard  used to say) "incomplet and incorrekt," and many suffer from
   limitations of the compilers that use them.

   The  GNU  C/C++/FORTRAN/<pick-a-language>  compiler (gcc, g++, etc) is
   widely considered to be one of the leading compilers in the world. Its
   development  has  recently been taken over by the [42]GCC team. All of
   the  rapid development and near-legendary [43]portability that are the
   hallmarks of an open-source project are being applied to libstdc++.

   That  means  that  all  of the Standard classes and functions (such as
   string,  vector<>, iostreams, and algorithms) will be freely available
   and  fully  compliant.  Programmers will no longer need to "roll their
   own" nor be worried about platform-specific incompatabilities.
     _________________________________________________________________

1.3 Who's in charge of it?

   The libstdc++ project is contributed to by several developers all over
   the  world,  in the same way as GCC or Linux. Benjamin Kosnik, Gabriel
   Dos Reis, Phil Edwards, and Ulrich Drepper are the lead maintainers of
   the CVS archive.

   Development  and  discussion  is  held  on the libstdc++ mailing list.
   Subscribing  to  the  list, or searching the list archives, is open to
   everyone.  You can read instructions for doing so on the [44]homepage.
   If you have questions, ideas, code, or are just curious, sign up!
     _________________________________________________________________

1.4 How do I get libstdc++?

   The  eleventh  (and  latest) snapshot of libstdc++-v3 is [45]available
   via ftp.

   The  [46]homepage  has  instructions  for  retrieving  the  latest CVS
   sources, and for browsing the CVS sources over the web.

   The  subset  commonly known as the Standard Template Library (chapters
   23  through  25, mostly) is adapted from the SGI STL, which is also an
   ongoing work.
     _________________________________________________________________

1.5 When is libstdc++ going to be finished?

   Nathan  Myers  gave  the best of all possible answers, responding to a
   Usenet article asking this question: Sooner, if you help.
     _________________________________________________________________

1.6 How do I contribute to the effort?

   Here  is  [47]a page devoted to this topic. Subscribing to the mailing
   list  (see  above,  or  the  homepage) is a very good idea if you have
   something  to  contribute, or if you have spare time and want to help.
   Contributions don't have to be in the form of source code; anybody who
   is  willing  to  help write documentation, for example, or has found a
   bug in code that we all thought was working, is more than welcome!
     _________________________________________________________________

1.7 What happened to libg++? I need that!

   The  most  recent  libg++ README states that libg++ is no longer being
   actively  maintained.  It  should not be used for new projects, and is
   only being kicked along to support older code.

   The  libg++  was  designed  and  created when there was no Standard to
   provide  guidance.  Classes  like linked lists are now provided for by
   list<T>  and  do not need to be created by genclass. (For that matter,
   templates  exist now and are well-supported, whereas genclass (mostly)
   predates them.)

   There  are  other  classes in libg++ that are not specified in the ISO
   Standard (e.g., statistical analysis). While there are a lot of really
   useful  things that are used by a lot of people (e.g., statistics :-),
   the  Standards  Committee couldn't include everything, and so a lot of
   those "obvious" classes didn't get included.

   Since  libstdc++ is an implementation of the Standard Library, we have
   no  plans  at  this  time  to  include  non-Standard  utilities in the
   implementation,  however  handy  they are. (The extensions provided in
   the  SGI  STL  aren't  maintained  by  us  and  don't get a lot of our
   attention,  because  they  don't  require  a  lot  of our time.) It is
   entirely  plausable  that  the  "useful  stuff"  from  libg++ might be
   extracted  into  an  updated  utilities library, but nobody has stated
   such a project yet.

   (The  [48]Boost site houses free C++ libraries that do varying things,
   and  happened  to  be  started  by members of the Standards Committee.
   Certain "useful stuff" classes will probably migrate there.)

   For the bold and/or desperate, the [49]GCC FAQ describes where to find
   the last libg++ source.
     _________________________________________________________________

1.8 What if I have more questions?

   If you have read the README and RELEASE-NOTES files, and your question
   remains unanswered, then just ask the mailing list. At present, you do
   not  need  to  be subscribed to the list to send a message to it. More
   information  is available on the homepage (including how to browse the
   list archives); to send to the list, use [50]libstdc++@gcc.gnu.org.

   If  you  have a question that you think should be included here, or if
   you  have  a  question  about a question/answer here, contact [51]Phil
   Edwards or [52]Gabriel Dos Reis.
     _________________________________________________________________

                               2.0 Installation

2.1 How do I install libstdc++-v3?

   Complete  instructions  are  not  given  here  (this  is a FAQ, not an
   installation document), but the tools required are few:
     * A  3.x  release  of GCC. Note that building GCC is much easier and
       more automated than building the GCC 2.[78] series was. If you are
       using   GCC  2.95,  you  can  still  build  earlier  snapshots  of
       libstdc++.
     * GNU Make is recommended, but should not be required.
     * The GNU Autotools are needed if you are messing with the configury
       or makefiles.

   The  file [53]documentation.html provides a good overview of the steps
   necessary  to  build,  install,  and use the library. Instructions for
   configuring  the  library  with new flags such as --enable-threads are
   there  also,  as well as patches and instructions for working with GCC
   2.95.

   The  top-level  install.html  and  [54]RELEASE-NOTES files contain the
   exact  build  and  installation  instructions.  You may wish to browse
   those  files  over  CVSweb  ahead  of  time  to  get a feel for what's
   required.   RELEASE-NOTES   is  located  in  the  ".../docs/17_intro/"
   directory of the distribution.
     _________________________________________________________________

2.2 [removed]

   This  question  has become moot and has been removed. The stub is here
   to preserve numbering (and hence links/bookmarks).
     _________________________________________________________________

2.3 What is this CVS thing that you keep mentioning?

   The  Concurrent  Versions  System  is  one of several revision control
   packages. It was selected for GNU projects because it's free (speech),
   free  (beer),  and  very  high  quality.  The [55]CVS entry in the GNU
   software  catalogue  has a better description as well as a [56]link to
   the makers of CVS.

   The "anonymous client checkout" feature of CVS is similar to anonymous
   FTP in that it allows anyone to retrieve the latest libstdc++ sources.

   After  the  first  of  April,  American  users will have a "/pharmacy"
   command-line option...
     _________________________________________________________________

2.4 How do I know if it works?

   libstdc++-v3 comes with its own testsuite. You do not need to actually
   install the library ("make install") to run the testsuite.

   To  run  the  testsuite  on  the  library after building it, use "make
   check"  while  in  your  build  directory. To run the testsuite on the
   library  after  building  and  installing it, use "make check-install"
   instead.

   If you find bugs in the testsuite programs themselves, or if you think
   of  a new test program that should be added to the suite, please write
   up your idea and send it to the list!
     _________________________________________________________________

                         3.0 Platform-Specific Issues

3.1 Can libstdc++-v3 be used with <my favorite compiler>?

   Probably not. Yet.

   Because  GCC advances so rapidly, development and testing of libstdc++
   is  being done almost entirely under that compiler. If you are curious
   about  whether other, lesser compilers (*grin*) support libstdc++, you
   are  more  than  welcome  to try. Configuring and building the library
   (see  above)  will  still require certain tools, however. Also keep in
   mind that building libstdc++ does not imply that your compiler will be
   able to use all of the features found in the C++ Standard Library.

   Since  the  goal of ISO Standardization is for all C++ implementations
   to  be  able  to share code, the final libstdc++ should, in theory, be
   useable  under  any  ISO-compliant compiler. It will still be targeted
   and optimized for GCC/g++, however.
     _________________________________________________________________

3.2 [removed]

   This  question  has become moot and has been removed. The stub is here
   to preserve numbering (and hence links/bookmarks).
     _________________________________________________________________

3.3 Building DEC OSF kills the assembler

   The   atomicity.h  header  for  the  Alpha  processor  currently  uses
   pseudo-operators  which  the  DEC  assembler  doesn't  understand  (in
   particular,  .subsection  and  .previous).  The  simple solution is to
   install  GNU  as and arrange for the GCC build to use it (or merge the
   sources and build it during the bootstrap).

   Anyone  who  [57]knows  the  DEC  assembler well enough to provide the
   equivalent  of  these  two pseudos would win praise and accolades from
   many.
     _________________________________________________________________

                          4.0 Known Bugs and Non-Bugs

   Note  that this section can get rapdily outdated -- such is the nature
   of  an  open-source  project.  For  the  latest  information, join the
   mailing  list  or look through recent archives. The RELEASE- NOTES and
   BUGS files are generally kept up-to-date.

   For  3.0.1,  the  most  common "bug" is an apparently missing "../" in
   include/Makefile, resulting in files like gthr.h and gthr-single.h not
   being found.

   Please  read  [58]the configuration instructions for GCC, specifically
   the  part  about  configuring  in  a seperate build directory, and how
   strongly  recommended  it  is.  Building  in  the  source directory is
   fragile,  is  rarely tested, and tends to break, as in this case. Work
   has  already  gone  into the source tree to make this less painful for
   the next release.

   Please  do  not report this as a bug. We know about it. Reporting this
   --  or  any  other  problem  that's  already been fixed -- hinders the
   development  of  GCC,  because we have to take time to respond to your
   report. Thank you.

4.1 What works already?

   This is a verbatim clip from the "Status" section of the RELEASE-NOTES
   for the latest snapshot.
New:
---
- preliminary doxygen documentation has been added. Running "make
  doxygen" in the libstdc++-v3 build directory will generate HTML
  documentation that can be used to cross-reference names and files in
  the library.
- a dejagnu based testing framework has been added
- a new implementation of the concept checking code has been ported
  from the boost libraries.
- support for -fno-exceptions has been added
- stdexcept was re-written
- using deprecated or antiquated headers now gives a warning
- the stdio interface to iostreams has been tweaked, and now works
  with synchronized c/c++ io
- new libsupc++ routines implementing the IA-64 C++ ABI.
- HPUX configuration files
- support for AIX added
- a lot of bugs were fixed.
- preliminary named locales implemented
- portability improvements made to generation of <limits>
- speedups to improve configuration time.
- DJGPP support added.
- support for dlopening shared libstdc++
     _________________________________________________________________

4.2 Bugs in gcc/g++ (not libstdc++-v3)

   This  is by no means meant to be complete nor exhaustive, but mentions
   some  problems  that  users  may  encounter  when  building  or  using
   libstdc++. If you are experiencing one of these problems, you can find
   more information on the libstdc++ and the GCC mailing lists.
     * As of 2.91, these bugs have all been fixed. We look forward to new
       ones, well, not exactly...
     _________________________________________________________________

4.3 Bugs in the C++ language/lib specification

   Yes,  unfortunately,  there  are  some.  In a [59]message to the list,
   Nathan  Myers  announced that he has started a list of problems in the
   ISO  C++  Standard itself, especially with regard to the chapters that
   concern  the  library.  The  list itself is [60]posted on his website.
   Developers  who are having problems interpreting the Standard may wish
   to consult his notes.

   For  those  people  who  are  not part of the ISO Library Group (i.e.,
   nearly  all  of us needing to read this page in the first place :-), a
   public list of the library defects is occasionally published [61]here.
     _________________________________________________________________

4.4 Things in libstdc++ that look like bugs

   There  are  things  which  are  not bugs in the compiler (4.2) nor the
   language  specification  (4.3),  but  aren't really bugs in libstdc++,
   either. Really! Please do not report these as bugs.

   -Weffc++  The  biggest  of these is the quadzillions of warnings about
   the  library  headers  emitted when -Weffc++ is used. Making libstdc++
   "-Weffc++-clean"  is  not  a  goal  of the project, for a few reasons.
   Mainly,  that  option  tries  to  enforce object-oriented programming,
   while  the  Standard  Library isn't necessarily trying to be OO. There
   are multiple solutions under discussion.

   rel_ops  Another  is the rel_ops namespace and the template comparison
   operator  functions  contained  therein. If they become visible in the
   same  namespace  as other comparison functions (e.g., 'using' them and
   the  <iterator>  header),  then  you  will suddenly be faced with huge
   numbers  of  ambiguity  errors.  This  was  discussed on the -v3 list;
   Nathan Myers [62]sums things up here.

  The g++-3 headers are not ours

   If  you  have  found  an extremely broken header file which is causing
   problems  for  you, look carefully before submitting a "high" priority
   bug  report  (which  you  probably  shouldn't  do anyhow; see the last
   paragraph of the page describing [63]the GCC bug database).

   If  the headers are in ${prefix}/include/g++-3, then you are using the
   old  libstdc++-v2  library,  which is nonstandard and unmaintained. Do
   not report problems with -v2 to the -v3 mailing list.

   Currently  our  header files are installed in ${prefix}/include/g++-v3
   (see  the  'v'?).  This may change with the next release of GCC, as it
   may be too confusing, but [64]the question has not yet been decided.

   glibc  If you're on a GNU/Linux system and have just upgraded to glibc
   2.2,  but  are  still  using gcc 2.95.2, then you should have read the
   glibc FAQ, specifically 2.34:
2.34.   When compiling C++ programs, I get a compilation error in streambuf.h.

{BH} You are using g++ 2.95.2? After upgrading to glibc 2.2, you need to
apply a patch to the include files in /usr/include/g++, because the fpos_t
type has changed in glibc 2.2.  The patch is at
http://clisp.cons.org/~haible/gccinclude-glibc-2.2-compat.diff


   Note  that  2.95.x  shipped  with  the  [65]old v2 library which is no
   longer  maintained.  Also note that gcc 2.95.3 fixes this problem, but
   requires a separate patch for libstdc++-v3.

   concept checks If you see compilation errors containing messages about
   fooConcept  and  a  constraints  member function, then most likely you
   have   violated   one  of  the  requirements  for  types  used  during
   instantiation  of  template  containers  and  functions.  For example,
   EqualityComparableConcept  appears  if  your  types must be comparable
   with  ==  and  you have not provided this capability (a typo, or wrong
   visibility, or you just plain forgot, etc).

   More  information,  including  how  to  optionally  enable/disable the
   checks, is available [66]here.
     _________________________________________________________________

4.5 Aw, that's easy to fix!

   If  you  have  found  a  bug  in  the library and you think you have a
   working  fix,  then  send  it  in!  The  main  GCC  site has a page on
   [67]submitting  patches  that  covers the procedure, but for libstdc++
   you  should also send the patch to our mailing list in addition to the
   GCC  patches  mailing  list. The libstdc++ [68]contributors' page also
   talks about how to submit patches.

   In addition to the description, the patch, and the ChangeLog entry, it
   is a Good Thing if you can additionally create a small test program to
   test  for  the  presence of the bug that your patch fixes. Bugs have a
   way  of  being  reintroduced; if an old bug creeps back in, it will be
   caught  immediately  by  the  [69]testsuite -- but only if such a test
   exists.
     _________________________________________________________________

                               5.0 Miscellaneous

5.1 string::iterator is not char*; vector<T>::iterator is not T*

   If  you  have  code  that  depends  on  container<T>  iterators  being
   implemented as pointer-to-T, your code is broken.

   While  there  are  arguments  for  iterators to be implemented in that
   manner,  A)  they  aren't very good ones in the long term, and B) they
   were never guaranteed by the Standard anyway. The type-safety achieved
   by  making  iterators  a  real  class  rather  than  a  typedef for T*
   outweighs nearly all opposing arguments.

   Code which does assume that a vector iterator i is a pointer can often
   be  fixed  by  changing  i  in  certain  expressions  to  &*i . Future
   revisions  of  the  Standard  are  expected  to  bless  this usage for
   vector<> (but not for basic_string<>).
     _________________________________________________________________

5.2 What's next after libstdc++-v3?

   Hopefully,  not  much.  The  goal  of  libstdc++-v3  is  to  produce a
   fully-compliant,  fully-portable  Standard  Library. After that, we're
   mostly done: there won't be any more compliance work to do. However:
    1. The  ISO Committee will meet periodically to review Defect Reports
       in  the  C++  Standard.  Undoubtedly  some of these will result in
       changes  to  the  Standard,  which will be reflected in patches to
       libstdc++.  Some  of  that  is already happening, see 4.2. Some of
       those  changes are being predicted by the library maintainers, and
       we  add  code  to  the  library based on what the current proposed
       resolution  specifies.  Those  additions  are  listed  in  [70]the
       extensions page.
    2. Performance  tuning.  Lots  of  performance  tuning.  This  too is
       already  underway  for  post-3.0  releases,  starting  with memory
       expansion  in  container  classes and buffer usage in synchronized
       stream objects.
    3. An  ABI  for  libstdc++  will  eventually  be  developed,  so that
       multiple binary-incompatible copies of the library can be replaced
       with a single backwards-compatible library, like libgcc_s.so is.
    4. The  current  libstdc++  contains  extensions to the Library which
       must be explicitly requested by client code (for example, the hash
       tables from SGI). Other extensions may be added to libstdc++-v3 if
       they  seem  to be "standard" enough. (For example, the "long long"
       type  from  C99.)  Bugfixes and rewrites (to improve or fix thread
       safety, for instance) will of course be a continuing task.

   [71]This  question  about  the  next libstdc++ prompted some brief but
   interesting [72]speculation.
     _________________________________________________________________

5.3 What about the STL from SGI?

   The  [73]STL  from  SGI, version 3.3, was the most recent merge of the
   STL  codebase.  The code in libstdc++ contains many fixes and changes,
   and  it  is  very  likely  that the SGI code is no longer under active
   development. We expect that no future merges will take place.

   In particular, string is not from SGI and makes no use of their "rope"
   class  (which  is  included as an optional extension), nor is valarray
   and some others. Classes like vector<> are, however.

   The FAQ for SGI's STL (one jump off of their main page) is recommended
   reading.
     _________________________________________________________________

5.4 Extensions and Backward Compatibility

   Although  you  can  specify -I options to make the preprocessor search
   the  g++-v3/ext  and  /backward  directories, it is better to refer to
   files there by their path, as in:
       #include <ext/hash_map>


   Extensions to the library have [74]their own page.
     _________________________________________________________________

5.5 [removed]

   This  question  has become moot and has been removed. The stub is here
   to preserve numbering (and hence links/bookmarks).
     _________________________________________________________________

5.6 Is libstdc++-v3 thread-safe?

   Quick  answer:  no, as of 2.92 (eleventh snapshot), the library is not
   appropriate for multithreaded access. The string class is MT-safe.

   This  is  assuming  that  your  idea of "multithreaded" is the same as
   ours...  The  general  question  of multithreading and libstdc++-v3 is
   addressed in the chapter-specific advice for [75]Library Introduction.
   Threadsafe  containers  are covered in more detail in [76]the Received
   Wisdom section on containers.
     _________________________________________________________________

5.7 How do I get a copy of the ISO C++ Standard?

   Copies  of  the  full ISO 14882 standard are available on line via the
   ISO  mirror site for committee members. Non-members, or those who have
   not  paid  for the privilege of sitting on the committee and sustained
   their  two-meeting commitment for voting rights, may get a copy of the
   standard from their respective national standards organization. In the
   USA, this national standards organization is ANSI and their website is
   right  [77]here. (And if you've already registered with them, clicking
   this link will take you to directly to the place where you can [78]buy
   the standard on-line.

   Who is your country's member body? Visit the [79]ISO homepage and find
   out!
     _________________________________________________________________

   Comments  and  suggestions  are  welcome,  and  may be sent to [80]the
   mailing list.

References

   1. http://gcc.gnu.org/onlinedocs/libstdc++/faq/
   2. http://gcc.gnu.org/libstdc++/
   3. ../faq/index.html#1_0
   4. ../faq/index.html#1_1
   5. ../faq/index.html#1_2
   6. ../faq/index.html#1_3
   7. ../faq/index.html#1_4
   8. ../faq/index.html#1_5
   9. ../faq/index.html#1_6
  10. ../faq/index.html#1_7
  11. ../faq/index.html#1_8
  12. ../faq/index.html#2_0
  13. ../faq/index.html#2_1
  14. ../faq/index.html#2_2
  15. ../faq/index.html#2_3
  16. ../faq/index.html#2_4
  17. ../faq/index.html#3_0
  18. ../faq/index.html#3_1
  19. ../faq/index.html#3_2
  20. ../faq/index.html#3_3
  21. ../faq/index.html#4_0
  22. ../faq/index.html#4_1
  23. ../faq/index.html#4_2
  24. ../faq/index.html#4_3
  25. ../faq/index.html#4_4
  26. ../faq/index.html#4_4_Weff
  27. ../faq/index.html#4_4_rel_ops
  28. ../faq/index.html#4_4_interface
  29. ../faq/index.html#4_4_glibc
  30. ../faq/index.html#4_4_checks
  31. ../faq/index.html#4_5
  32. ../faq/index.html#5_0
  33. ../faq/index.html#5_1
  34. ../faq/index.html#5_2
  35. ../faq/index.html#5_3
  36. ../faq/index.html#5_4
  37. ../faq/index.html#5_5
  38. ../faq/index.html#5_6
  39. ../faq/index.html#5_7
  40. ftp://gcc.gnu.org/pub/libstdc++/libstdc++-2.92.tar.gz
  41. ../17_intro/DESIGN
  42. http://gcc.gnu.org/
  43. http://gcc.gnu.org/gcc-2.95/buildstat.html
  44. http://gcc.gnu.org/libstdc++/
  45. ftp://gcc.gnu.org/pub/libstdc++/libstdc++-2.92.tar.gz
  46. http://gcc.gnu.org/libstdc++/
  47. ../17_intro/contribute.html
  48. http://www.boost.org/
  49. http://gcc.gnu.org/fom_serv/cache/33.html
  50. mailto:libstdc++@gcc.gnu.org
  51. mailto:pme@gcc.gnu.org
  52. mailto:gdr@gcc.gnu.org
  53. ../documentation.html
  54. ../17_intro/RELEASE-NOTES
  55. http://www.gnu.org/software/cvs/cvs.html
  56. http://www.cvshome.org/
  57. http://gcc.gnu.org/ml/libstdc++/2000-12/msg00279.html
  58. http://gcc.gnu.org/install/configure.html
  59. http://gcc.gnu.org/ml/libstdc++/1998/msg00006.html
  60. http://www.cantrip.org/draft-bugs.txt
  61. http://anubis.dkuug.dk/jtc1/sc22/wg21/
  62. http://gcc.gnu.org/ml/libstdc++/2001-01/msg00247.html
  63. http://gcc.gnu.org/gnatswrite.html
  64. http://gcc.gnu.org/ml/gcc/2000-10/msg00732.html
  65. ../faq/index.html#4_4_interface
  66. ../19_diagnostics/howto.html#3
  67. http://gcc.gnu.org/contribute.html
  68. ../17_intro/contribute.html
  69. ../faq/index.html#2_4
  70. ../ext/howto.html#5
  71. http://gcc.gnu.org/ml/libstdc++/1999/msg00080.html
  72. http://gcc.gnu.org/ml/libstdc++/1999/msg00084.html
  73. http://www.sgi.com/Technology/STL/
  74. ../ext/howto.html
  75. http://gcc.gnu.org/onlinedocs/libstdc++/17_intro/howto.html#3
  76. http://gcc.gnu.org/onlinedocs/libstdc++/23_containers/howto.html
  77. http://www.ansi.org/
  78. http://webstore.ansi.org/ansidocstore/product.asp?sku=ISO%2FIEC+14882%2D1998
  79. http://www.iso.ch/
  80. mailto:libstdc++@gcc.gnu.org
