# configure.target
#
# This shell script handles all target based configuration for libstdc++.
# It sets various shell variables based on the the target and the
# configuration options.  You can modify this shell script without needing
# to rerun autoconf/aclocal/etc.  This file is "sourced" not executed.
#
# You should read docs/html/17_intro/porting.* to make sense of this file.
#
#
# It uses the following shell variables as set by config.guess:
#   target                The configuration target (full CPU-vendor-OS triplet)
#   target_cpu            The configuration target CPU
#   target_os             The configuration target OS
#
#
# It sets the following shell variables:
#
#   cpu_include_dir        CPU-specific directory, defaults to cpu/generic
#                              if cpu/target_cpu doesn't exist.  This is
#                              used to set the next two:
#   ATOMICITYH             location of bits/atomicity.h,
#                              defaults to cpu_include_dir
#   CPULIMITSH             location of bits/cpu_limits.h,
#                              defaults to cpu_include_dir
#
#   os_include_dir         OS-specific directory, defaults to os/generic.
#
#
# It possibly modifies the following variables:
#
#   OPT_LDFLAGS            extra flags to pass when linking the library, of
#                              the form '-Wl,blah'
#                              (defaults to empty in acinclude.m4)
#
#
# If the defaults will not work for your platform, you need only change the
# variables that won't work, i.e., you do not need to explicitly set a
# working variable to its default.  Most targets only need to change the two
# *_include_dir variables.


# Try to guess a default cpu_include_dir based on the name of the CPU.  We
# cannot do this for os_include_dir; there are too many portable operating
# systems out there.  :-)
if test -d ${glibcpp_srcdir}/config/cpu/${target_cpu}; then
    cpu_include_dir="cpu/${target_cpu}"
else
    cpu_include_dir="cpu/generic"
fi


# Here we override defaults and catch more general cases due to naming
# conventions (e.g., chip_name* to catch all variants).  Also set any
# CPU-dependent compiler flags.
# THIS TABLE IS SORTED.  KEEP IT THAT WAY.
case "${target_cpu}" in
  alpha*)
    cpu_include_dir="cpu/alpha"
    ;;
  arm*)
    cpu_include_dir="cpu/arm"
    ;;
  i486 | i586 | i686 | i786)
    cpu_include_dir="cpu/i486"
    CPULIMITSH="cpu/i386"
    ;;
  m68k | m680[246]0)
    cpu_include_dir="cpu/m68k"
    ;;
  mips)
    # This is only until the mips routines are fixed.
    cpu_include_dir="cpu/generic"
    ;;
  mmix)
    ATOMICITYH="cpu/generic"
    ;;
  powerpc | rs6000)
    cpu_include_dir="cpu/powerpc"
    ;;
  s390 | s390x)
    cpu_include_dir="cpu/s390"
    ;;
  sparc64 | ultrasparc)
    cpu_include_dir="cpu/sparc/sparc64"
    ;;
  sparc*)
    cpu_include_dir="cpu/sparc/sparc32"
    ;;
  x86_64*)
    cpu_include_dir="cpu/x86-64"
    ;;
esac


# Now look for the two files usually tied to a CPU model, and make default
# choices for those if they haven't been explicitly set already.
_cpu_incdir_fullpath=${glibcpp_srcdir}/config/${cpu_include_dir}
if test x${ATOMICITYH+set} != xset; then
  if test -f ${_cpu_incdir_fullpath}/bits/atomicity.h; then
    ATOMICITYH=$cpu_include_dir
  else
    ATOMICITYH="cpu/generic"
  fi
fi
if test x${CPULIMITSH+set} != xset; then
  if test -f ${_cpu_incdir_fullpath}/bits/cpu_limits.h; then
    CPULIMITSH=$cpu_include_dir
  else
    CPULIMITSH="cpu/generic"
  fi
fi
unset _cpu_incdir_fullpath


# Set the os_include_dir.  If atomic ops and/or numeric limits are OS-specific
# rather than CPU-specifc, set those here too.  Also set any OS-dependent
# compiler flags.
# THIS TABLE IS SORTED.  KEEP IT THAT WAY.
case "${target_os}" in
  aix4.[3456789]* | aix[56789]*)
    # We set os_include_dir to os/aix only on AIX 4.3 and newer, but
    # os/aix/bits/atomicity.h works on earlier versions of AIX 4.*, so we
    # explicitly duplicate the directory for 4.[<3].
    os_include_dir="os/aix"
    ATOMICITYH="os/aix"
    OPT_LDFLAGS="-Wl,-G"
    ;;
  aix4.*)
    ATOMICITYH="os/aix"
    ;;
  aix*)
    ATOMICITYH="cpu/generic"
    ;;
  bsd* | freebsd* )
    os_include_dir="os/bsd/freebsd"
    ;;
  cygwin*)
    os_include_dir="os/newlib"
    ;;
  *djgpp*)      # leading * picks up "msdosdjgpp"
    os_include_dir="os/djgpp"
    ;;
  gnu* | linux*)
    os_include_dir="os/gnu-linux"
    ;;
  hpux*)
    os_include_dir="os/hpux"
    CPULIMITSH="os/hpux"
    ;;
  irix[1-6] | irix[1-5].* | irix6.[0-4])
    # This is known to work on at least IRIX 5.2 and 6.3.
    os_include_dir="os/irix/irix5.2"
    ATOMICITYH=$os_include_dir
    ;;
  irix6.5)
    os_include_dir="os/irix/irix6.5"
    ATOMICITYH=$os_include_dir
    ;;
  mingw32*)
    os_include_dir="os/mingw32"
    ;;
  netbsd*)
    os_include_dir="os/bsd/netbsd"
    ;;
  solaris2.5*)
    os_include_dir="os/solaris/solaris2.5"
    ;;
  solaris2.6*)
    os_include_dir="os/solaris/solaris2.6"
    ;;
  solaris2.[78]*)
    os_include_dir="os/solaris/solaris2.7"
    ;;
  windiss*)
    os_include_dir="os/windiss"
    ;;
  qnx6.[12]*)
    os_include_dir="os/qnx/qnx6.1"
    ;;
  *)
    os_include_dir="os/generic"
    ;;
esac


# Set any flags dependent on the full target triplet.
# THIS TABLE IS SORTED.  KEEP IT THAT WAY.
case "${target}" in
  alpha*-*-*osf5*)
    CPULIMITSH="os/osf/osf5.0"
    ;;
esac

