// <system_error> -*- C++ -*-

// Copyright (C) 2007 Free Software Foundation, Inc.
//
// This file is part of the GNU ISO C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 2, or (at your option)
// any later version.

// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this library; see the file COPYING.  If not, write to
// the Free Software Foundation, 51 Franklin Street, Fifth Floor,
// Boston, MA 02110-1301, USA.

// As a special exception, you may use this file as part of a free software
// library without restriction.  Specifically, if other files instantiate
// templates or use macros or inline functions from this file, or you compile
// this file and link it with other files to produce an executable, this
// file does not by itself cause the resulting executable to be covered by
// the GNU General Public License.  This exception does not however
// invalidate any other reasons why the executable file might be covered by
// the GNU General Public License.

/** @file include/system_error
 *  This is a Standard C++ Library header.
 */

#ifndef _GLIBCXX_SYSTEM_ERROR
#define _GLIBCXX_SYSTEM_ERROR 1

#pragma GCC system_header

#ifndef __GXX_EXPERIMENTAL_CXX0X__
# include <c++0x_warning.h>
#endif

#include <bits/c++config.h>
#include <bits/error_constants.h>
#include <iosfwd>
#include <stdexcept>

_GLIBCXX_BEGIN_NAMESPACE(std)

  class system_error;
  class error_code;
  class error_category;

  extern const error_category& system_category;

  /// error_category
  struct error_category
  {
    error_category() { }

    bool 
    operator==(const error_category& __other) const
    { return this == &__other; }

    bool 
    operator!=(const error_category& __other) const
    { return this != &__other; }

    virtual posix_error::posix_errno 
    posix(int __v) const = 0;

    virtual const string& 
    name() const = 0;

  private:
    error_category(const error_category&);

    error_category& 
    operator=(const error_category&);
  };

  /// error_code
  struct error_code
  {
    error_code() throw()
    : _M_value(0), _M_cat(&system_category) { }

    error_code(int __v, const error_category& __cat) throw()
    : _M_value(__v), _M_cat(&__cat) { }

    error_code(posix_error::posix_errno __v)
    : _M_value(__v), _M_cat(&system_category) { }

    void 
    assign(int __v, const error_category& __cat) throw()
    {
      _M_value = __v;
      _M_cat = &__cat; 
    }

    void 
    clear() throw()
    { 
      _M_value = 0;
      _M_cat = &system_category;
   } 

    int
    value() const throw() { return _M_value; }
      
    const error_category&  
    category() const { return *_M_cat; }

    posix_error::posix_errno            
    posix() const throw() { return this->category().posix(_M_value); }

    // Safe bool idiom.
    // explicit operator bool() const throw()
    // { return _M_value != 0; }
    typedef void (*__bool_type)();

    static void __not_bool_type() { }

    operator __bool_type() const throw()
    { return _M_value != 0 ? &__not_bool_type : false; }

    bool operator==(const error_code& __other) const
    { return value() == __other.value() && category() == __other.category(); }

    bool operator!=(const error_code& __other) const
    { return !(this == &__other); }

  private:
    int            		_M_value;
    const error_category* 	_M_cat;
  };

  /// Thrown to indicate error code of underlying system.
  class system_error : public std::runtime_error
  {
  private:
    error_code 	_M_code;

  public:
    system_error(const string& __what, error_code __ec = error_code())
    : runtime_error(__what), _M_code(__ec) { }

    system_error(const string& __what, int __v, const error_category& __ecat)
    : runtime_error(__what), _M_code(error_code(__v, __ecat)) { }

    virtual ~system_error() throw();

    const error_code& 
    code() const throw() { return _M_code; }
  };

_GLIBCXX_END_NAMESPACE

#endif 

