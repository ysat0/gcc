# -*- shell-script -*-
#   Copyright (C) 2011 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  

# This is the target specific configuration file.  This is invoked by the
# autoconf generated configure script.  Putting it in a separate shell file
# lets us skip running autoconf when modifying target specific information.

# This file switches on the shell variable ${target}, and sets the
# following shell variables:
#  config_path		An ordered list of directories to search for
#			sources and headers.  This is relative to the
#			config subdirectory of the source tree.
#  XCFLAGS		Add extra compile flags to use.
#  XLDFLAGS		Add extra link flags to use.

# Optimize TLS usage by avoiding the overhead of dynamic allocation.
if test $gcc_cv_have_tls = yes ; then
  case "${target}" in

    # For x86, we use slots in the TCB head for most of our TLS.
    # The setup of those slots in beginTransaction can afford to
    # use the global-dynamic model.
    i[456]86-*-linux* | x86_64-*-linux*)
	;;
    
    *-*-linux*)
	XCFLAGS="${XCFLAGS} -ftls-model=initial-exec"
	;;
  esac
fi

# Map the target cpu to an ARCH sub-directory.  At the same time,
# work out any special compilation flags as necessary.
case "${target_cpu}" in
  alpha*)	ARCH=alpha ;;
  ia64*)	ARCH=ia64 ;;
  mips*)	ARCH=mips ;;
  powerpc*)	ARCH=powerpc ;;
  s390*)	ARCH=s390 ;;

  i[456]86)
	case " ${CC} ${CFLAGS} " in
	  *" -m64 "*)
	    ;;
	  *)
	    if test -z "$with_arch"; then
	      XCFLAGS="${XCFLAGS} -march=i486 -mtune=${target_cpu}"
	      XCFLAGS="${XCFLAGS} -fomit-frame-pointer"
	    fi
	esac
	ARCH=x86
	;;

  x86_64)
	case " ${CC} ${CFLAGS} " in
	  *" -m32 "*)
	    XCFLAGS="${XCFLAGS} -march=i486 -mtune=i686"
	    XCFLAGS="${XCFLAGS} -fomit-frame-pointer"
	    ;;
	esac
	ARCH=x86
	;;

  sparcv9 | sparc64)
	# Note that sparcv7 and sparcv8 is not included here.  We need cas.
	echo "int i;" > conftestx.c
	if ${CC} ${CFLAGS} -c -o conftestx.o conftestx.c > /dev/null 2>&1; then
	  case "`/usr/bin/file conftestx.o`" in
	    *32-bit*)
	      case " ${CC} ${CFLAGS}" in
		*" -mcpu=ultrasparc"*)
		  ;;
		*)
		  XCFLAGS="${XCFLAGS} -mcpu=v9"
		  ;;
	      esac
	      ;;
	  esac
	fi
	rm -f conftestx.c conftestx.o
	ARCH=sparc
	;;

  *)
	ARCH="${target_cpu}"
	;;
esac
  
# Since we require POSIX threads, assume a POSIX system by default.
config_path="$ARCH posix generic"

# Other system configury
case "${target}" in
  *-*-linux*)
	if test $enable_linux_futex = yes; then
	  config_path="linux/$ARCH linux $config_path"
	fi
	;;

  *-*-hpux11*)
	# HPUX v11.x requires -lrt to resolve sem_init in libgomp.la
	XLDFLAGS="${XLDFLAGS} -lrt"
	;;

  *-*-mingw32*)
	config_path="$ARCH mingw32 posix generic"
	;;

  *-*-solaris2.[56]*)
	config_path="$ARCH posix95 posix generic"
	XLDFLAGS="${XLDFLAGS} -lposix4"
	;;

  *-*-darwin*)
	config_path="$ARCH bsd posix generic"
	;;
esac
