2010-06-17  Robert Dewar  <dewar@adacore.com>

	* checks.adb, exp_aggr.adb, exp_atag.adb, exp_attr.adb, exp_ch11.adb,
	exp_ch3.adb, exp_ch4.adb: Minor code reorganization.
	Use Make_Temporary.
	* tbuild.ads, tbuild.adb (Make_Temporary): Clean up, use Entity_Id
	instead of Node_Id.
	(Make_Temporary): Add more extensive documentation

2010-06-17  Robert Dewar  <dewar@adacore.com>

	* sem_intr.adb, sem_prag.adb, sem_res.adb, sem_type.adb, sem_util.adb,
	sem_warn.adb, sem_eval.adb: Minor reformatting.  Use Ekind_In.
	(Set_Slice_Subtype): Explicitly freeze the slice's itype at the point
	where the slice's actions are inserted.
	(Decompose_Expr): Account for possible rewriting of slice bounds
	resulting from side effects suppression caused by the above freezing,
	so that folding of bounds is preserved by such rewriting.

2010-06-17  Robert Dewar  <dewar@adacore.com>

	* einfo.ads, einfo.adb (Get_Record_Representation_Clause): New function.
	* freeze.adb (Freeze_Record_Type): Add call to
	Check_Record_Representation_Clause.
	* sem_ch13.adb (Check_Record_Representation_Clause): New function
	(Analyze_Record_Representation_Clause): Split out overlap code into this
	new function.
	(Check_Component_Overlap): Moved inside
	Check_Record_Representation_Clause.
	* sem_ch13.ads (Check_Record_Representation_Clause): New function.

2010-06-17  Robert Dewar  <dewar@adacore.com>

	* back_end.adb, sem_res.adb, switch-c.adb, sem_scil.adb: Minor
	reformatting.
	* sem_attr.adb, sem_cat.adb, sem_disp.adb, sem_elab.adb, sem_elim.adb,
	sem_eval.adb: Use Ekind_In

2010-06-17  Ed Schonberg  <schonberg@adacore.com>

	* sem_ch8.adb: better error message for illegal inherited discriminant

2010-06-17  Vincent Celier  <celier@adacore.com>

	* bindusg.adb: Remove lines for -A and -C
	* gnat_ugn.texi: Remove all documentation and examples of switches -A
	and -C for gnatbind and gnatlink.
	* gnatlink.adb (Usage): Remove lines for -A and -C
	* switch-b.adb (Scan_Binder_Switches): Issue warning when switch -C is
	specified.
	* gcc-interface/Make-lang.in: Update dependencies.

2010-06-17  Vincent Celier  <celier@adacore.com>

	* back_end.adb (Scan_Compiler_Arguments): Put all arguments in new
	local Argument_List variable Args.
	* switch-c.adb (Scan_Front_End_Switches): New Argument_List argument
	Args.
	(Switch_Subsequently_Cancelled): New Argument_List argument Args. Look
	for subsequent switches in Args.
	* switch-c.ads (Scan_Front_End_Switches): New Argument_List argument
	Args.
	* gcc-interface/Make-lang.in: Update dependencies.

2010-06-17  Robert Dewar  <dewar@adacore.com>

	* einfo.adb: Minor code fix, allow E_Class_Wide_Type for
	Equivalent_Type to match documentation.

2010-06-17  Robert Dewar  <dewar@adacore.com>

	* sem_ch6.adb, sem_ch7.adb: Minor reformatting.
	* sem_ch3.adb, sem_ch5.adb, sem_ch9.adb, sem_ch10.adb, sem_ch12.adb,
	sem_ch4.adb, sem_ch8.adb, sem_ch13.adb: Make use of Ekind_In.

2010-06-17  Thomas Quinot  <quinot@adacore.com>

	* sem_res.adb (Set_Slice_Subtype): Always freeze the slice's itype.

2010-06-17  Thomas Quinot  <quinot@adacore.com>

	* freeze.adb (Freeze_Expression): Short circuit operators are valid
	freeze node insertion points.

2010-06-17  Robert Dewar  <dewar@adacore.com>

	* switch-c.ads, switch-c.adb, sem_ch13.adb: Minor reformatting.
	* sem_ch12.adb: Add pragmas Assert and Check to previous change.

2010-06-17  Gary Dismukes  <dismukes@adacore.com>

	* layout.adb (Layout_Type): Broaden test for setting an array type's
	Component_Size to include all scalar types, not just discrete types
	(components of real types were missed).
	* sem_ch3.adb (Constrain_Index): Add missing setting of First_Literal
	on the itype created for an index (consistent with Make_Index and
	avoids possible Assert_Failures).

2010-06-17  Robert Dewar  <dewar@adacore.com>

	* atree.ads, atree.adb: Add 6-parameter version of Ekind_In
	* einfo.adb: Minor code reformatting (use Ekind_In)

2010-06-17  Robert Dewar  <dewar@adacore.com>

	* sem_warn.adb (Test_Ref): Abandon scan if access subprogram parameter
	found.

2010-06-17  Vincent Celier  <celier@adacore.com>

	* back_end.adb: Minor comment updates
	* switch-c.adb: Remove dependencies on gcc C sources
        * gcc-interface/Make-lang.in: Add a-comlin.o to the object file list
	for the compiler.

2010-06-17  Ed Schonberg  <schonberg@adacore.com>

	* sem_ch12.adb: propagate Pragma_Enabled flag to generic.
	* get_scos.adb: Set C2 flag in decision entry of pragma to 'e' (enabled)
	* par_sco.ads, par_sco.adb (Set_SCO_Pragma_Enabled): New procedure
	Remove use of Node field in SCOs table
	(Output_Header): Set 'd' to initially disable pragma entry
	* put_scos.adb (Put_SCOs): New flag indicating if pragma is enabled
	* scos.ads, scos.adb: Remove Node field from internal SCOs table.
	Use C2 field of pragma decision header to indicate enabled.
	* sem_prag.adb: Add calls to Set_SCO_Pragma_Enabled.
	* gcc-interface/Make-lang.in: Update dependencies.

2010-06-17  Vincent Celier  <celier@adacore.com>

	* back_end.adb (Next_Arg): Moved to procedure Scan_Compiler_Arguments
	(Scan_Compiler_Arguments): Call Scan_Front_End_Switches with Next_Arg
	(Switch_Subsequently_Cancelled): Function moved to the body of Switch.C
	* back_end.ads (Scan_Front_End_Switches): Function moved to the body of
	Switch.C.
	* switch-c.adb: Copied a number of global declarations from back_end.adb
	(Len_Arg): New function copied from back_end.adb
	(Switch_Subsequently_Cancelled): New function moved from back_end.adb
	(Scan_Front_End_Switches): New parameter Arg_Rank used to call
	Switch_Subsequently_Cancelled.
	* switch-c.ads (Scan_Front_End_Switches): New parameter Arg_Rank.
	* gcc-interface/Makefile.in: Add line so that shared libgnat is linked
	with -lexc on Tru64.

2010-06-17  Robert Dewar  <dewar@adacore.com>

	* prj.ads, prj.adb: Minor reformatting

2010-06-17  Thomas Quinot  <quinot@adacore.com>

	* put_scos.adb: Do not generate a blank line in SCOs when omitting the
	CP line for a disabled pragma.

2010-06-17  Emmanuel Briot  <briot@adacore.com>

	* prj-proc.adb, prj.adb, prj.ads (Check_Or_Set_Typed_Variable): New
	subprogram.
	(Process_Declarative_Item): An invalid value in an typed variable
	declaration is no longer always fatal.

2010-06-16  Arnaud Charlet  <charlet@adacore.com>

	* get_scos.adb, par_sco.adb, par_sco.ads, put_scos.adb, scos.adb,
	scos.ads, exp_ch4.adb, sem_warn.adb: Code clean up, update
	documentation.

2010-06-16  Javier Miranda  <miranda@adacore.com>

	* exp_disp.adb (Expand_Dispatching_Call): Adjust the decoration of the
	node referenced by the SCIL node of dispatching "=" to skip the tags
	comparison.

2010-06-16  Ed Schonberg  <schonberg@adacore.com>

	* sem_ch5.adb (Analyze_Exit_Statement): Return if no enclosing loop,
	to prevent cascaded errors and compilation aborts.

2010-06-16  Robert Dewar  <dewar@adacore.com>

	* back_end.adb (Switch_Subsequently_Cancelled): New function
	Move declarations to package body level to support this change
	* back_end.ads (Switch_Subsequently_Cancelled): New function
	* gnat_ugn.texi: Document -gnat-p switch
	* switch-c.adb (Scan_Front_End_Switches): Implement -gnat-p switch
	* ug_words: Add entry for -gnat-p (UNSUPPRESS_ALL)
	* usage.adb: Add line for -gnat-p switch
	* vms_data.ads: Add entry for UNSUPPRESS_ALL (-gnat-p)

2010-06-16  Robert Dewar  <dewar@adacore.com>

	* sem_warn.adb (Check_Infinite_Loop_Warning): Declaration counts as
	modification.

2010-06-16  Robert Dewar  <dewar@adacore.com>

	* exp_disp.adb: Minor reformatting

2010-06-16  Ed Schonberg  <schonberg@adacore.com>

	* sem_ch3.adb (Complete_Private_Subtype): Inherit class_wide type from
	base type only if it was not previously created for the partial view.

2010-06-16  Thomas Quinot  <quinot@adacore.com>

	* tbuild.ads: Minor comment fix

2010-06-15  Nathan Froyd  <froydnj@codesourcery.com>

	* gcc-interface/trans.c (gnu_stack_free_list): Delete.
	(gnu_except_ptr_stack): Change type to VEC.  Update comment.
	(gnu_elab_proc_stack): Likewise.
	(gnu_return_label_stack): Likewise.
	(gnu_loop_label_stack): Likewise.
	(gnu_switch_label_stack): Likewise.
	(gnu_constraint_label_stack): Likewise.
	(gnu_storage_error_label_stack): Likewise.
	(gnu_program_error_label_stack): Likewise.
	(push_exception_label_stack): Take a VEC ** instead of a tree *.
	(push_stack): Likewise.  Remove unused second parameter.  Update
	callers.
	(pop_stack): Take a VEC * instead of a tree *.  Update callers.
	(gigi): Initialize stacks as VECs.
	(Identifier_to_gnu): Use VEC_last instead of TREE_VALUE.
	(Case_Statement_to_gnu): Likewise.
	(Subprogram_Body_to_gnu): Likewise.
	(call_to_gnu): Likewise.
	(Exception_Handler_to_gnu_sjlj): Likewise.
	(gnat_to_gnu): Likewise.
	(get_exception_label): Likewise.

2010-06-14  Ed Schonberg  <schonberg@adacore.com>

	* sem_ch3.adb (Build_Derived_Record_Type): if derived type is an
	anonymous base generated when the parent is a constrained discriminated
	type, propagate interface list to first subtype because it may appear
	in a current instance within the extension part of the derived type
	declaration, and its own subtype declaration has not been elaborated
	yet.
	* exp_disp.adb (Build_Interface_Thunk): Use base type of formal to
	determine whether it has the controlling type.

2010-06-14  Jerome Lambourg  <lambourg@adacore.com>

	* exp_ch11.adb (Expand_N_Raise_Statement): Make sure that the explicit
	raise of CE, SE and PE have the reason correctly set and are properly
	expanded before stopping the expansions of .NET/JVM exceptions.

2010-06-14  Robert Dewar  <dewar@adacore.com>

	* opt.ads (Check_Policy_List): Add some clarifying comments
	* sem_prag.adb (Analyze_Pragma, case Check): Set Pragma_Enabled flag
	on rewritten Assert pragma.

2010-06-14  Gary Dismukes  <dismukes@adacore.com>

	* sem_ch6.adb (Check_Overriding_Indicator): Add a special check for
	controlled operations, so that they will be treated as overriding even
	if the overridden subprogram is marked Is_Hidden, as long as the
	overridden subprogram's parent subprogram is not hidden.

2010-06-14  Robert Dewar  <dewar@adacore.com>

	* debug.adb: Entry for gnatw.d no longer specific for while loops
	* einfo.adb (First_Exit_Statement): New attribute for E_Loop
	* einfo.ads (First_Exit_Statement): New attribute for E_Loop
	* sem_ch5.adb (Analyze_Loop_Statement): Check_Infinite_Loop_Warning has
	new calling sequence to include test for EXIT WHEN.
	(Analyze_Exit_Statement): Chain EXIT statement into exit statement chain
	* sem_warn.ads, sem_warn.adb (Check_Infinite_Loop_Warning): Now handles
	EXIT WHEN case.
	* sinfo.adb (Next_Exit_Statement): New attribute of N_Exit_Statement
	node.
	* sinfo.ads (N_Pragma): Correct comment on Sloc field (points to
	PRAGMA, not to pragma identifier).
	(Next_Exit_Statement): New attribute of N_Exit_Statement node

2010-06-14  Robert Dewar  <dewar@adacore.com>

	* sem_res.adb (Resolve_Short_Circuit): Fix sloc of "assertion/check
	would fail" msg.

2010-06-14  Robert Dewar  <dewar@adacore.com>

	* par-ch2.adb (Scan_Pragma_Argument_Association): Clarify message for
	missing pragma argument identifier.

2010-06-14  Robert Dewar  <dewar@adacore.com>

	* atree.ads, atree.adb (Ekind_In): New functions.

2010-06-14  Robert Dewar  <dewar@adacore.com>

	* exp_ch4.adb (Expand_N_Op_Expon): Optimize 2**N in stand alone context

2010-06-14  Robert Dewar  <dewar@adacore.com>

	* usage.adb (Usage): Redo documentation of -gnatwa.

2010-06-14  Ed Schonberg  <schonberg@adacore.com>

	* sem_ch8.adb (Find_Type): The attribute 'class cannot be applied to
	an untagged incomplete type that is a limited view.

2010-06-14  Sergey Rybin  <rybin@adacore.com>

	* gnat_ugn.texi: Add description of '-cargs gcc_switches' to gnatstub
	and gnatppa.

2010-06-14  Thomas Quinot  <quinot@adacore.com>

	* exp_ch4.adb (Expand_Short_Circuit_Operator): New subprogram,
	factoring duplicated code between...
	(Expand_N_And_Than, Expand_N_Or_Else): Remove duplicated code.
	* a-envvar.ads: Minor reformatting

2010-06-14  Arnaud Charlet  <charlet@adacore.com>

	* ali.adb, ali.ads, lib-xref.ads: Document new '+' letter for C/C++
	static entities.
	(Scan_ALI): Take into account new Visibility field.
	(Visibility_Kind): New type.
	(Xref_Entity_Record): Replace Lib field by Visibility.

	* gcc-interface/Make-lang.in: Update dependencies.

2010-06-14  Pascal Obry  <obry@adacore.com>

	* raise.h: Remove unused defintions.

2010-06-14  Bob Duff  <duff@adacore.com>

	* par-ch10.adb (P_Subunit): If the next token after "separate(X)" is
	Tok_Not or Tok_Overriding, call P_Subprogram. We had previously given
	the incorrect error "proper body expected".
	* par-ch6.adb (P_Subprogram): Suppress "overriding indicator not
	allowed here" error in case of subunits, which was triggered by the
	above change to P_Subunit.

2010-06-14  Sergey Rybin  <rybin@adacore.com>

	* gnat_ugn.texi, vms_data.ads: Update gnatelim doc.

2010-06-14  Thomas Quinot  <quinot@adacore.com>

	* lib-util.adb: Minor code reorganization.

2010-06-14  Robert Dewar  <dewar@adacore.com>

	* ali.adb (Scan_ALI): Implement reading and storing of N lines
	(Known_ALI_Lines): Add entry for 'N' (notes)
	* ali.ads (Notes): New table to store Notes information
	* alloc.ads: Add entries for Notes table
	* lib-util.adb (Write_Info_Int): New procedure
	(Write_Info_Slit): New procedure
	(Write_Info_Uint): New procedure
	* lib-util.ads (Write_Info_Int): New procedure
	(Write_Info_Slit): New procedure
	(Write_Info_Uint): New procedure
	* lib-writ.adb (Write_Unit_Information): Output N (notes) lines
	* lib-writ.ads: Update documentation for N (Notes) lines
	* lib.adb (Store_Note): New procedure
	* lib.ads (Notes): New table
	(Store_Note): New procedure
	* sem_prag.adb: Call Store_Note for affected pragmas

2010-06-14  Thomas Quinot  <quinot@adacore.com>

	* socket.c: Fix wrong condition in #ifdef
	* g-socket.adb, g-sothco.ads: Functions imported from socket.c that
	take or return char* values can't use Interfaces.C.Strings.chars_ptr,
	because on VMS this type is a 32-bit pointer which is not compatible
	with the default for C pointers for code compiled with gcc on that
	platform.

2010-06-14  Ed Schonberg  <schonberg@adacore.com>

	* sem_util (Is_VMS_Operator): New predicate to determine whether an
	operator is an intrinsic operator declared in the DEC system extension.
	* sem_res.adb (Resolve_Logical_Op): operation is legal on signed types
	if the operator is a VMS intrinsic.
	* sem_eval.adb (Eval_Logical_Op): Operation is legal and be
	constant-folded if the operands are signed and the operator is a VMS
	intrinsic.

2010-06-14  Robert Dewar  <dewar@adacore.com>

	* g-socket.adb, gnatcmd.adb: Minor reformatting.

2010-06-14  Pascal Obry  <obry@adacore.com>

	* s-finimp.adb: Fix typo.
	* raise.h: Remove duplicate blank line.

2010-06-14  Vincent Celier  <celier@adacore.com>

	* prj-nmsc.adb (Add_Sources): Always set the object file and the
	switches file names, as the configuration of the language may change
	in an extending project.
	(Process_Naming_Scheme): For sources of projects that are extended, set
	the configuration of the language from the highest extending project
	where the language is declared.

2010-06-14  Gary Dismukes  <dismukes@adacore.com>

	* sem_res.adb (Resolve_Call): For infinite recursion check, test
	whether the called subprogram is inherited from a containing subprogram.
	(Same_Or_Aliased_Subprograms): New function

2010-06-14  Ed Schonberg  <schonberg@adacore.com>

	* sem_ch8.adb (End_Use_Type): Before indicating that an operator is not
	use-visible, check whether it is a primitive for more than one type.

2010-06-14  Robert Dewar  <dewar@adacore.com>

	* sem_ch3.adb (Copy_And_Swap): Copy Has_Pragma_Unmodified flag.

	* sem_ch7.adb (Preserve_Full_Attributes): Preserve
	Has_Pragma_Unmodified flag.

2010-06-14  Thomas Quinot  <quinot@adacore.com>

	* g-sttsne-locking.adb, g-sttsne-locking.ads, g-sttsne.ads,
	g-sttsne-vxworks.adb, g-sttsne-dummy.ads: Removed. Mutual exclusion is
	now done in GNAT.Sockets if necessary.
	* gsocket.h, g-socket.adb, g-sothco.ads (GNAT.Sockets.Get_XXX_By_YYY):
	Ensure mutual exclusion for netdb operations if the target platform
	requires it.
	(GNAT.Sockets.Thin_Common): New binding for getXXXbyYYY, treating struct
	hostent as an opaque type to improve portability.
	* s-oscons-tmplt.c, socket.c: For the case of Vxworks, emulate
	gethostbyYYY using proprietary VxWorks API so that a uniform interface
	is available for the Ada side.
	* gcc-interface/Makefile.in: Remove g-sttsne-*
	* gcc-interface/Make-lang.in: Update dependencies.

2010-06-14  Vincent Celier  <celier@adacore.com>

	* gnatcmd.adb (Mapping_File): New function.

2010-06-14  Javier Miranda  <miranda@adacore.com>

	* sem_ch3.adb (Derive_Subprograms): Remove over-restrictive assertion.

2010-06-14  Arnaud Charlet  <charlet@adacore.com>

	* ali.adb: Fix typo.
	* s-auxdec-vms-alpha.adb, scng.ads: Minor reformatting.

2010-06-14  Ed Schonberg  <schonberg@adacore.com>

	* sem_ch12.adb: Make Mark_Context transitive, and apply to subprogram
	instances.

	* sem_ch8.adb (Find_Expanded_Name): If a candidate compilation unit in
	the context does not have a homonym of the selector, emit default
	error message.

2010-06-14  Robert Dewar  <dewar@adacore.com>

	* sem.adb, sem_ch12.adb, sem_util.adb: Minor reformatting and
	comment addition.

2010-06-14  Arnaud Charlet  <charlet@adacore.com>

	* lib-xref.ads: Doc updates:
	 - Allocate 'Q' for #include entity kind
	 - Free 'Z'
	 - Allocate 'g' for regular macros
	 - Allocate 'G' for function-like macros

2010-06-14  Ed Schonberg  <schonberg@adacore.com>

	* sinfo.ads, sinfo.adb (Withed_Body): New attribute of a with_clause.
	Indicates that there is an instantiation in the current unit that
	loaded the body of the unit denoted by the with_clause.
	* sem_ch12.adb (Mark_Context): When instanting a generic body, check
	whether a with_clause in the current context denotes the unit that
	holds the generic declaration, and mark the with_clause accordingly.
	(Instantiate_Package_Body): call Mark_Context.
	* sem.adb (Process_Bodies_In_Context): Use Withed_Body to determine
	whether a given body should be traversed before the spec of the main
	unit.

2010-06-14  Ed Falis  <falis@adacore.com>

	* sysdep.c: Fix 653 build against vThreads headers.

2010-06-14  Robert Dewar  <dewar@adacore.com>

	* sinfo.ads: Minor reformatting.

2010-06-14  Ed Schonberg  <schonberg@adacore.com>

	* sem_ch6.adb (Analyze_Subprogram_Body): Do not check conformance when
	the spec has been generated for a body without spec that carries an
	Inline_Always pragma.

2010-06-14  Arnaud Charlet  <charlet@adacore.com>

	* lib-xref.ads: Documentation change: allocate 'Z' letter to C/C++
	macro.

2010-06-14  Jerome Lambourg  <lambourg@adacore.com>

	* exp_dbug.adb (Debug_Renaming_Declaration): Do not output any debug
	declaration for VMs, as those are useless and might lead to duplicated
	local variable names in the generated code.
	* gcc-interface/Make-lang.in: Update dependencies.

2010-06-14  Robert Dewar  <dewar@adacore.com>

	* opt.ads, sem.adb, sem_elab.adb: Minor reformatting

2010-06-14  Robert Dewar  <dewar@adacore.com>

	* exp_aggr.adb (Has_Address_Clause): Moved to Exp_Util, and there it
	is renamed as Has_Following_Address_Clause.
	* exp_ch3.adb (Needs_Simple_Initialization): Add Consider_IS argument
	to allow the caller to avoid Initialize_Scalars having an effect.
	(Expand_N_Object_Declaration): Do not do Initialize_Scalars stuff for
	scalars with an address clause specified.
	* exp_ch3.ads (Needs_Simple_Initialization): Add Consider_IS argument
	to allow the caller to avoid Initialize_Scalars having an effect.
	* exp_util.adb (Has_Following_Address_Clause): Moved here from Exp_Aggr
	(where it was called Has_Address_Clause).
	* exp_util.ads (Has_Following_Address_Clause): Moved here from Exp_Aggr
	(where it was called Has_Address_Clause).
	* freeze.adb (Warn_Overlay): Suppress message about overlaying causing
	problems for Initialize_Scalars (since we no longer initialize objects
	with an address clause.

2010-06-14  Robert Dewar  <dewar@adacore.com>

	* exp_prag.adb (Expand_Pragma_Check): Set Loc of generated code from
	condition.

2010-06-14  Gary Dismukes  <dismukes@adacore.com>

	* sem_ch6.adb (Analyze_Subprogram_Body_Helper): Set Debug_Info_Needed
	on the entity of an implicitly generated postcondition procedure.

2010-06-14  Thomas Quinot  <quinot@adacore.com>

	* sem_ch7.adb (Preserve_Full_Attributes): Propagate
	Discriminant_Constraint elist from full view to private view.

2010-06-14  Robert Dewar  <dewar@adacore.com>

	* sem_res.adb: Minor reformatting.

2010-06-14  Ed Schonberg  <schonberg@adacore.com>

	* sem.adb: New version of unit traversal.

	* sem_elab.adb (Check_Internal_Call): Do not place a call appearing
	within a generic unit in the table of delayed calls.

2010-06-14  Robert Dewar  <dewar@adacore.com>

	* gnatcmd.adb, sem_util.adb, exp_ch3.adb: Minor reformatting

2010-06-14  Ed Schonberg  <schonberg@adacore.com>

	* sem_ch12.adb (Save_References): If an identifier has been rewritten
	during analysis as an explicit dereference, keep the reference implicit
	in the generic, but preserve the entity if global. This prevents
	malformed generic trees in the presence of some nested generics.

2010-06-14  Sergey Rybin  <rybin@adacore.com>

	* gnat_ugn.texi: For the GNAT driver, clarify the effect of calling the
	tool with '-files=' option. Also fix some small errors (wrong brackets)

2010-06-14  Vincent Celier  <celier@adacore.com>

	* gnatbind.adb: Call Scan_ALI with Directly_Scanned set to True for all
	the ALI files on the command line.

	* ali.adb (Scan_ALI): Set component Directly_Scanned of the unit(s) to
	the same value as the parameter of the same name.
	* ali.ads (Scan_ALI): New Boolean parameter Directly_Scanned, defaulted
	to False.
	* bindgen.adb (Gen_Versions_Ada): Never emit version symbols for
	Stand-Alone Library interfaces. When binding Stand-Alone Libraries,
	emit version symbols only for the units of the library.
	(Gen_Versions_C): Ditto.

2010-06-14  Gary Dismukes  <dismukes@adacore.com>

	* sem_ch4.adb: Fix typo.

2010-06-14  Vasiliy Fofanov  <fofanov@adacore.com>

	* s-oscons-tmplt.c (IOV_MAX): redefine on Tru64 and VMS since the
	vector IO doesn't work at default value properly.

2010-06-14  Doug Rupp  <rupp@adacore.com>

	* s-stoele.adb: Remove unnecessary qualification of To_Address for VMS.

2010-06-14  Vincent Celier  <celier@adacore.com>

	* gnatcmd.adb (Check_Files): Do not invoke the tool with all the
	sources of the project if a switch -files= is used.

2010-06-14  Thomas Quinot  <quinot@adacore.com>

	* exp_attr.adb: Minor reformatting.

2010-06-14  Gary Dismukes  <dismukes@adacore.com>

	* gnat_ugn.texi: Minor typo fixes and wording changes.

2010-06-14  Ed Schonberg  <schonberg@adacore.com>

	* sem_ch4.adb (Analyze_One_Call): If the call has been rewritten from a
	prefixed form, do not re-analyze first actual, which may need an
	implicit dereference.
	* sem_ch6.adb (Analyze_Procedure_Call): If the call is given in
	prefixed notation, the analysis will rewrite the node, and possible
	errors appear in the rewritten name of the node.
	* sem_res.adb: If a call is ambiguous because its first parameter is
	an overloaded call, report list of candidates, to clarify ambiguity of
	enclosing call.

2010-06-14  Doug Rupp  <rupp@adacore.com>

	* s-auxdec-vms-alpha.adb: New package body implementing legacy
	VAX instructions with Asm insertions.
	* s-auxdec-vms_64.ads: Inline VAX queue functions
	* s-stoele.adb: Resolve some ambiguities in To_Addresss with s-suxdec
	that show up only on VMS.
	* gcc-interface/Makefile.in: Provide translation for
	s-auxdec-vms-alpha.adb.

2010-06-14  Olivier Hainque  <hainque@adacore.com>

	* initialize.c (VxWorks section): Update comments.

2010-06-14  Robert Dewar  <dewar@adacore.com>

	* a-convec.adb, sem_prag.adb, checks.adb: Minor reformatting.

2010-06-14  Eric Botcazou  <ebotcazou@adacore.com>

	* init.c: Code clean up.

2010-06-14  Ed Schonberg  <schonberg@adacore.com>

	* sem_ch13.adb (Analyze_Attribute_Definition_Clause, case Address): Do
	not insert address clause in table for later validation if type of
	entity is generic, to prevent possible spurious errors. 

	* sem_ch8.adb: Code clean up.

2010-06-14  Ben Brosgol  <brosgol@adacore.com>

	* gnat_ugn.texi: Expanded @ovar macro inline to solve problem with
	texi2pdf and texi2html.
	Document how to change scheduling properties on HP-UX.

2010-06-14  Thomas Quinot  <quinot@adacore.com>

	* g-socket.ads: Remove misleading comments.

2010-06-14  Jerome Lambourg  <lambourg@adacore.com>

	* sem_prag.adb (Check_Duplicated_Export_Name): Remove check for
	CLI_Target as this prevents proper detection of exported names
	duplicates when the exported language is different to CIL.
	(Process_Interface_Name): Add check for CIL convention exports,
	replacing the old one from Check_Duplicated_Export_Name.

2010-06-14  Matthew Heaney  <heaney@adacore.com>

	* a-coinve.adb, a-convec.adb (operator "&"): Check both that new length
	and new last satisfy constraints.
	(Delete_Last): prevent overflow for subtraction of index values
	(To_Vector): prevent overflow for addition of index values

2010-06-14  Ed Schonberg  <schonberg@adacore.com>

	* sem_ch4.adb (Complete_Object_Operation): After analyzing the
	rewritten call, preserve the resulting type to prevent spurious errors,
	when the call is implicitly dereferenced in the context of an in-out
	actual.

	* checks.adb (Apply_Discriminant_Check): If the target of the
	assignment is a renaming of a heap object, create constrained type for
	it to apply check.

2010-06-14  Pascal Obry  <obry@adacore.com>

	* prj-proc.adb: Fix copy of object directory for extending projects.

2010-06-14  Jose Ruiz  <ruiz@adacore.com>

	* init.c (__gnat_alternate_stack): Define this space for PowerPC linux
	(__gnat_install_handler, PowerPC linux): Activate the alternative
	signal stack.

2010-06-13  Gerald Pfeifer  <gerald@pfeifer.com>

	* gnat_rm.texi: Move to GFDL version 1.3.
	* gnat-style.texi: Ditto.
	* gnat_ugn.texi: Ditto.

2010-06-12  Kai Tietz

	PR ada/43731
	* gcc-interface/Makefile.in: Add rules for multilib x86/x64
	mingw targets.

2010-06-11  Alexandre Oliva  <aoliva@redhat.com>

	* gcc-interface/utils.c (update_pointer_to): Initialize last.

2010-06-09  Eric Botcazou  <ebotcazou@adacore.com>

	* gcc-interface/ada-tree.h: Fix formatting nits.

2010-06-08  Laurynas Biveinis  <laurynas.biveinis@gmail.com>

	* gcc-interface/utils.c (init_gnat_to_gnu): Use typed GC
	allocation.
	(init_dummy_type): Likewise.
	(gnat_pushlevel): Likewise.

	* gcc-interface/trans.c (Attribute_to_gnu): Likewise.
	(Subprogram_Body_to_gnu): Likewise.
	(Compilation_Unit_to_gnu): Likewise.
	(start_stmt_group): Likewise.
	(extract_encoding): Likewise.
	(decode_name): Likewise.

	* gcc-interface/misc.c (gnat_printable_name): Likewise.

	* gcc-interface/decl.c (annotate_value): Likewise.

	* gcc-interface/ada-tree.h (struct lang_type): Add variable_size
	GTY option.
	(struct lang_decl): Likewise.
	(SET_TYPE_LANG_SPECIFIC): Use typed GC allocation.
	(SET_DECL_LANG_SPECIFIC): Likewise.

2010-06-04  Eric Botcazou  <ebotcazou@adacore.com>

	* gnatlink.adb (gnatlink): Remove support for -fsjlj switch.
	* gcc-interface/lang-specs.h: Likewise.

2010-06-03  H.J. Lu  <hongjiu.lu@intel.com>

	PR c++/44294
	* gcc-interface/decl.c (MAX_FIXED_MODE_SIZE): Removed.

2010-06-01  Arnaud Charlet  <charlet@adacore.com>

	* gnat_ugn.texi: Improve doc on -fdump-ada-spec, mention limitations.

2010-05-30  Eric Botcazou  <ebotcazou@adacore.com>

	* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Task_Type>: Reuse the
	TYPE_DECL of the equivalent type instead of building a new one.

2010-05-30  Eric Botcazou  <ebotcazou@adacore.com>

	* gcc-interface/decl.c (gnat_to_gnu_entity): Adjust warning message.
	Fix nits in comments.
	* gcc-interface/misc.c (gnat_init_gcc_eh): Likewise.
	* gcc-interface/trans.c (gigi): Likewise.
	(Attribute_to_gnu): Likewise.
	(Case_Statement_to_gnu): Likewise.
	(gnat_to_gnu): Adjust warning message.
	* gcc-interface/utils.c (create_var_decl_1): Fix nits in comments.
	(build_vms_descriptor32): Likewise.

2010-05-27  Steven Bosscher  <steven@gcc.gnu.org>

	* gcc-interface/decl.c: Pretend to be a backend file by undefining
	IN_GCC_FRONTEND (still need rtl.h here).

2010-05-26  Steven Bosscher  <steven@gcc.gnu.org>

	* gcc-interface/trans.c: Do not include rtl.h, insclude libfuncs.h.
	(gigi): Adjust call to set_stack_check_libfunc.

2010-05-26  Steven Bosscher  <steven@gcc.gnu.org>

	* gcc-interface/utils.c: Do not include rtl.h.

2010-05-25  Steven Bosscher  <steven@gcc.gnu.org>

	* gcc-interface/utils.c: Do not include function.h, pointer-set.h,
	and gimple.h.  Explain why rtl.h has to be included.
	(handle_vector_size_attribute): Call reconstruct_complex_type directly.
	* gcc-interface/targtyps.c: Do not include tm_p.h
	* gcc-interface/utils2.c: Do not include flags.h.
	* gcc-interface/trans.c: Do not include expr.h.  Include rtl.h instead,
	and explain why it has to be included.
	* gcc-interface/misc.c: Do not include expr.h, libfuncs.h, cgraph.h,
	and optabs.h.
	Include function.h and explain why.  Explain why except.h is included.
	(enumerate_modes): Remove unused function. 
	* gcc-interface/gigi.h (enumerate_modes): Remove prototype.
	* gcc-interface/Make-lang.in: Update dependencies.

2010-05-25  Joseph Myers  <joseph@codesourcery.com>

	* gcc-interface/misc.c (internal_error_function): Add context
	parameter.  Use it to access show_column flag and instead of using
	global_dc.  Call warn_if_plugins.
	* gcc-interface/Make-lang.in (ada/misc.o): Update dependencies.

2010-05-19  Eric Botcazou  <ebotcazou@adacore.com>

	* gcc-interface/misc.c (LANG_HOOKS_DEEP_UNSHARING): Redefine.
	* gcc-interface/trans.c (unshare_save_expr): Delete.
	(gigi): Do not unshare trees under SAVE_EXPRs here.

2010-05-18  Nathan Froyd  <froydnj@codesourcery.com>

	* gcc-interface/trans.c (call_to_gnu): Use build_call_vec instead of
	build_call_list.
	* gcc-interface/utils.c (build_function_stub): Likewise.

2010-05-16  Manuel López-Ibáñez  <manu@gcc.gnu.org>

	* gcc-interface/misc.c (gnat_handle_option): Remove special logic
	for Wuninitialized without -O.
	
2010-05-16  Eric Botcazou  <ebotcazou@adacore.com>

	* gcc-interface/gigi.h (enum standard_datatypes): Add new value
	ADT_exception_data_name_id.
	(exception_data_name_id): New define.
	* gcc-interface/trans.c (gigi): Initialize it.
	* gcc-interface/decl.c (gnat_to_gnu_entity) <object>: Use the standard
	exception type for standard exception definitions.  Do not make them
	volatile.
	<E_Record_Type>: Equate fields of types associated with an exception
	definition to those of the standard exception type.

2010-05-13  Andreas Schwab  <schwab@linux-m68k.org>

	* tracebak.c (__gnat_backtrace): Mark top_stack with ATTRIBUTE_UNUSED.

2010-05-12  Eric Botcazou  <ebotcazou@adacore.com>

	* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Access_Type>: Tidy up
	code, improve comments and fix formatting nits.

2010-05-12  Eric Botcazou  <ebotcazou@adacore.com>

	* gcc-interface/utils.c (update_pointer_to): Return early if the old
	pointer already points to the new type.  Chain the old pointer and its
	variants at the end of new pointer's chain after updating them.

2010-05-10  Eric Botcazou  <ebotcazou@adacore.com>

	* exp_disp.adb (Make_Tags): Mark the imported view of dispatch tables
	built for interfaces.
	* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Variable>: Use
	imported_p instead of Is_Imported when considering constants.
	Do not promote alignment of exported objects.
	<E_Record_Subtype>: Strip all suffixes for dispatch table entities.

2010-05-08  Eric Botcazou  <ebotcazou@adacore.com>

	* exp_disp.adb (Make_Tags): Mark the imported view of dispatch tables.
	* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Variable>: Make imported
	constants really constant.
	<E_Record_Subtype>: Strip the suffix for dispatch table entities.

2010-05-08  Eric Botcazou  <ebotcazou@adacore.com>

	* gcc-interface/decl.c (make_aligning_type): Declare the type.

2010-05-08  Eric Botcazou  <ebotcazou@adacore.com>

	* gcc-interface/decl.c (gnat_to_gnu_entity): Create variables for size
	expressions of variant part of record types declared at library level.

2010-05-08  Eric Botcazou  <ebotcazou@adacore.com>

	* gcc-interface/gigi.h (create_field_decl): Move PACKED parameter.
	* gcc-interface/utils.c (create_field_decl): Move PACKED parameter.
	(rest_of_record_type_compilation): Adjust call to create_field_decl.
	(make_descriptor_field): Likewise and pass correctly typed constants.
	(build_unc_object_type): Likewise.
	(unchecked_convert): Likewise.
	* gcc-interface/decl.c (elaborate_expression_2): New static function.
	(gnat_to_gnu_entity): Use it to make alignment factors explicit.
	Adjust call to create_field_decl.
	(make_aligning_type): Likewise.
	(make_packable_type): Likewise.
	(maybe_pad_type): Likewise.
	(gnat_to_gnu_field): Likewise.
	(components_to_record): Likewise.
	(create_field_decl_from): Likewise.
	(create_variant_part_from): Remove superfluous test.
	* gcc-interface/trans.c (gigi): Adjust call to create_field_decl.

2010-05-08  Eric Botcazou  <ebotcazou@adacore.com>

	* gcc-interface/gigi.h (build_unc_object_type): Add DEBUG_INFO_P param.
	(build_unc_object_type_from_ptr): Likewise.
	* gcc-interface/utils.c (build_unc_object_type): Add DEBUG_INFO_P param
	and pass it to create_type_decl.  Declare the type.  Simplify.
	(build_unc_object_type_from_ptr): Add DEBUG_INFO_P parameter and pass
	it to build_unc_object_type.
	* gcc-interface/decl.c (gnat_to_gnu_entity): Adjust to above change.
	* gcc-interface/trans.c (Attribute_to_gnu): Likewise.
	(gnat_to_gnu): Likewise.
	* gcc-interface/utils2.c (build_allocator): Likewise.

2010-05-07 Eric Botcazou  <ebotcazou@adacore.com>

	PR 40989
	* gcc-interface/misc.c (gnat_handle_option): Fix long line.

2010-05-06  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>

	* gcc-interface/Makefile.in: Removed mips-sgi-irix5* support.

2010-05-06  Manuel López-Ibáñez  <manu@gcc.gnu.org>

	PR 40989
	* gcc-interface/misc.c (gnat_handle_option): Add argument kind.

2010-05-02  Giuseppe Scrivano  <gscrivano@gnu.org>

	* gnathtml.pl: Use 755 as mask for new directories.

2010-04-28  Eric Botcazou  <ebotcazou@adacore.com>

	* gcc-interface/trans.c (gnat_gimplify_expr) <ADDR_EXPR>: Uniquize
	constant constructors before taking their address.

2010-04-25  Eric Botcazou  <ebotcazou@adacore.com>

	* exp_dbug.ads: Fix outdated description.  Mention link between XVS
	and XVZ objects.
	* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Record_Subtype>: Set
	XVZ variable as unit size of XVS type.
	(maybe_pad_type): Likewise.

2010-04-25  Eric Botcazou  <ebotcazou@adacore.com>

	* gcc-interface/trans.c (gnat_to_gnu) <N_Assignment_Statement>: Do not
	use memmove if the array type is bit-packed.

2010-04-18  Eric Botcazou  <ebotcazou@adacore.com>

	* gcc-interface/misc.c (gnat_init): Remove second argument in call to
	build_common_tree_nodes.

2010-04-18  Ozkan Sezer  <sezeroz@gmail.com>

	* gsocket.h: Make sure that winsock2.h is included before windows.h.

2010-04-17  Eric Botcazou  <ebotcazou@adacore.com>

	* gcc-interface/utils2.c (build_unary_op) <ATTR_ADDR_EXPR>: Do not
	issue warning.

2010-04-17  Eric Botcazou  <ebotcazou@adacore.com>

	* uintp.h (UI_Lt): Declare.
	* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Array_Type>: Do the size
	computation in sizetype.
	<E_Array_Subtype>: Use unified handling for all index types.  Do not
	generate MAX_EXPR-based expressions, only COND_EXPR-based ones.  Add
	bypass for PATs.
	(annotate_value): Change test for negative values.
	(validate_size): Apply test for negative values on GNAT nodes.
	(set_rm_size): Likewise.
	* gcc-interface/misc.c (gnat_init): Set unsigned types for sizetypes.
	* gcc-interface/utils.c (rest_of_record_type_compilation): Change test
	for negative values.
	(max_size) <MINUS_EXPR>: Do not reassociate a COND_EXPR on the LHS.
	(builtin_type_for_size): Adjust definition of signed_size_type_node.
	* gcc-interface/utils2.c (compare_arrays): Optimize comparison of
	lengths against zero.

2010-04-17  Eric Botcazou  <ebotcazou@adacore.com>

	* back-end.adb (Call_Back_End): Pass Standard_Character to gigi.
	* gcc-interface/gigi.h (gigi): Add standard_character parameter.
	(CHAR_TYPE_SIZE, SHORT_TYPE_SIZE, INT_TYPE_SIZE, LONG_TYPE_SIZE, 
	LONG_LONG_TYPE_SIZE, FLOAT_TYPE_SIZE, DOUBLE_TYPE_SIZE,
	LONG_DOUBLE_TYPE_SIZE, SIZE_TYPE): Delete.
	* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Array_Subtype>: Call
	rm_size.
	* gcc-interface/misc.c (gnat_init): Set signedness of char as per
	flag_signed_char.  Tag sizetype with "size_type" moniker.
	* gcc-interface/trans.c (gigi): Add standard_character parameter.
	Remove useless built-in types.  Equate unsigned_char_type_node to
	Standard.Character.  Use it instead of char_type_node throughout.
	(Attribute_to_gnu): Likewise.
	(gnat_to_gnu): Likewise.
	* gcc-interface/utils2.c (build_call_raise): Likewise.

2010-04-17  Eric Botcazou  <ebotcazou@adacore.com>

	* gcc-interface/gigi.h (enum standard_datatypes): Add new values
	ADT_sbitsize_one_node and ADT_sbitsize_unit_node.
	(sbitsize_one_node): New macro.
	(sbitsize_unit_node): Likewise.
	* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Array_Subtype>: Fix
	latent bug in the computation of subrange_p.  Fold wider_p predicate.
	(cannot_be_superflat_p): Use an explicitly signed 64-bit type to do
	the final comparison.
	(make_aligning_type): Build real negation and use sizetype throughout
	the offset computation.
	(maybe_pad_type): Do not issue the warning when the new size expression
	is too complex.
	(annotate_value) <INTEGER_CST>: Simplify code handling negative values.
	* gcc-interface/misc.c (gnat_init): Initialize sbitsize_one_node and
	sbitsize_unit_node.
	* gcc-interface/trans.c (Attribute_to_gnu) <Attr_Pool_Address>: Fold
	double negation.
	(gnat_to_gnu) <N_Free_Statement>: Likewise.
	* gcc-interface/utils.c (convert): Use sbitsize_unit_node.
	* gcc-interface/utils2.c (compare_arrays): Compute real lengths and use
	constants in sizetype.  Remove dead code and tweak comments.  Generate
	equality instead of inequality comparisons for zero length tests.

2010-04-16  Eric Botcazou  <ebotcazou@adacore.com>

	* gcc-interface/gigi.h (gnat_init_decl_processing): Delete.
	* gcc-interface/decl.c (gnat_to_gnu_entity): Constify a few variables.
	<object>: Do not create the fake PARM_DECL if no debug info is needed.
	Do not create the corresponding VAR_DECL of a CONST_DECL for debugging
	purposes if no debug info is needed.
	Fix formatting.  Reorder and add comments.
	* gcc-interface/trans.c (gnat_to_gnu) <N_Attribute_Reference>: Constify
	variable and remove obsolete comment.
	* gcc-interface/utils.c (convert_vms_descriptor64): Tweak comment.
	(convert_vms_descriptor32): Likewise.
	(convert): Remove dead code.
	<UNCONSTRAINED_ARRAY_REF>: Pass the field instead of its name to build
	the reference to the P_ARRAY pointer.
	<POINTER_TYPE>: Likewise.
	(maybe_unconstrained_array) <UNCONSTRAINED_ARRAY_TYPE>: Likewise.
	(gnat_init_decl_processing): Delete, move contents to...
	* gcc-interface/misc.c (gnat_init): ...here.

2010-04-16  Eric Botcazou  <ebotcazou@adacore.com>

	* gcc-interface/trans.c (unchecked_conversion_nop): Handle function
	calls.  Return true for conversion from a record subtype to its type.

2010-04-16  Eric Botcazou  <ebotcazou@adacore.com>

	* gcc-interface/decl.c (gnat_to_gnu_entity): Use boolean_type_node in
	lieu of integer_type_node for boolean operations.
	(choices_to_gnu): Likewise.
	* gcc-interface/trans.c (Attribute_to_gnu): Likewise.
	(Loop_Statement_to_gnu): Likewise.
	(establish_gnat_vms_condition_handler): Likewise.
	(Exception_Handler_to_gnu_sjlj): Likewise.
	(gnat_to_gnu): Likewise.
	(build_unary_op_trapv): Likewise.
	(build_binary_op_trapv): Likewise.
	(emit_range_check): Likewise.
	(emit_index_check): Likewise.
	(convert_with_check): Likewise.
	* gcc-interface/utils.c (convert_vms_descriptor64): Likewise.
	(convert_vms_descriptor32): Likewise.
	(convert_vms_descriptor): Likewise.
	* gcc-interface/utils2.c (nonbinary_modular_operation): Likewise.
	(compare_arrays): Use boolean instead of integer constants.
	(build_binary_op) <TRUTH_ANDIF_EXPR, TRUTH_ORIF_EXPR, TRUTH_AND_EXPR,
	TRUTH_OR_EXPR, TRUTH_XOR_EXPR>: New case.  Check that the result type
	is a boolean type.
	<GE_EXPR, LE_EXPR, GT_EXPR, LT_EXPR>: Remove obsolete assertion.
	<EQ_EXPR, NE_EXPR>: Check that the result type is a boolean type.
	<PREINC/PREDECREMENT_EXPR, POSTINC/POSTDECREMENT_EXPR>: Delete.
	<TRUTH_NOT_EXPR>: Check that the result type is a boolean type.
	(build_unary_op): Use boolean_type_node in lieu of integer_type_node
	for boolean operations.
	(fill_vms_descriptor): Likewise.  Fix formatting nits.

2010-04-16  Eric Botcazou  <ebotcazou@adacore.com>

	* gcc-interface/ada-tree.def (LOOP_STMT): Change to 4-operand nodes.
	* gcc-interface/ada-tree.h (LOOP_STMT_TOP_COND, LOOP_STMT_BOT_COND):
	Merge into...
	(LOOP_STMT_COND): ...this.
	(LOOP_STMT_BOTTOM_COND_P): New flag.
	(LOOP_STMT_TOP_UPDATE_P): Likewise.
	* gcc-interface/trans.c (can_equal_min_or_max_val_p): New function.
	(can_equal_min_val_p): New static inline function.
	(can_equal_max_val_p): Likewise.
	(Loop_Statement_to_gnu): Use build4 in lieu of build5 and adjust to
	new LOOP_STMT semantics.  Use two different strategies depending on
	whether optimization is enabled to translate the loop.
	(gnat_gimplify_stmt) <LOOP_STMT>: Adjust to new LOOP_STMT semantics.

2010-04-16  Eric Botcazou  <ebotcazou@adacore.com>

	* uintp.adb (UI_From_Dint): Remove useless code.
	(UI_From_Int): Likewise.
	* uintp.h: Reorder declarations.
	(UI_From_gnu): Declare.
	(UI_Base): Likewise.
	(Vector_Template): Likewise.
	(Vector_To_Uint): Likewise.
	(Uint_0): Remove.
	(Uint_1): Likewise.
	* gcc-interface/gigi.h: Tweak comments.
	* gcc-interface/cuintp.c (UI_From_gnu): New global function.
	* gcc-interface/decl.c (maybe_pad_type): Do not warn if either size
	overflows.
	(annotate_value) <INTEGER_CST>: Call UI_From_gnu.
	* gcc-interface/trans.c (post_error_ne_num): Call post_error_ne.
	(post_error_ne_tree): Call UI_From_gnu and post_error_ne.
	* gcc-interface/utils.c (max_size) <tcc_binary>: Do not special-case
	TYPE_MAX_VALUE.

2010-04-16  Eric Botcazou  <ebotcazou@adacore.com>

	* gcc-interface/decl.c (make_type_from_size) <INTEGER_TYPE>: Just copy
	TYPE_NAME.
	* gcc-interface/trans.c (smaller_packable_type_p): Rename into...
	(smaller_form_type_p): ...this.  Change parameter and variable names.
	(call_to_gnu): Use the nominal type of the parameter to create the
	temporary if it's a smaller form of the actual type.
	(addressable_p): Return false if the actual type is integral and its
	size is greater than that of the expected type.

2010-04-15  Eric Botcazou  <ebotcazou@adacore.com>

	* gcc-interface/cuintp.c (UI_To_gnu): Fix long line.
	* gcc-interface/gigi.h (MARK_VISITED): Skip objects of constant class.
	(process_attributes): Delete.
	(post_error_ne_num): Change parameter name.
	* gcc-interface/decl.c (gnat_to_gnu_entity): Do not force debug info
	with -g3.  Remove a couple of obsolete lines.  Minor tweaks.
	If type annotating mode, operate on trees to compute the adjustment to
	the sizes of tagged types.  Fix long line.
	(cannot_be_superflat_p): Tweak head comment.
	(annotate_value): Fold local constant.
	(set_rm_size): Fix long line.
	* gcc-interface/trans.c (Identifier_to_gnu): Rework comments.
	(Attribute_to_gnu): Fix long line.
	<Attr_Size>: Remove useless assertion.
	Reorder statements.  Use size_binop routine.
	(Loop_Statement_to_gnu): Use build5 in lieu of build_nt.
	Create local variables for the label and the test.  Tweak comments.
	(Subprogram_Body_to_gnu): Reset cfun to NULL.
	(Compilation_Unit_to_gnu): Use the Sloc of the Unit node.
	(process_inlined_subprograms): Integrate into...
	(Compilation_Unit_to_gnu): ...this.
	(gnat_to_gnu): Fix long line.
	(post_error_ne_num): Change parameter name.
	* gcc-interface/utils.c (process_attributes): Static-ify.
	<ATTR_MACHINE_ATTRIBUTE>: Set input_location before proceeding.
	(create_type_decl): Add comment.
	(create_var_decl_1): Process the attributes after adding the VAR_DECL
	to the current binding level.
	(create_subprog_decl): Likewise for the FUNCTION_DECL.
	(end_subprog_body): Do not reset cfun to NULL.
	(build_vms_descriptor32): Fix long line.
	(build_vms_descriptor): Likewise.
	(handle_nonnull_attribute): Likewise.
	(convert_vms_descriptor64): Likewise.
	* gcc-interface/utils2.c (fill_vms_descriptor): Fix long line.
	(gnat_protect_expr): Fix thinko.

2010-04-15  Eric Botcazou  <ebotcazou@adacore.com>

	* gcc-interface/trans.c (gigi): Set DECL_IGNORED_P on EH functions.
	(gnat_to_gnu) <N_Op_Eq>: Restore the value of input_location
	before translating the top-level node.
	(lvalue_required_p) <N_Function_Call>: Return 1 if !constant.
	<N_Object_Declaration>: Likewise.
	<N_Assignment_Statement>: Likewise.
	<N_Unchecked_Type_Conversion>: Likewise.
	(call_to_gnu): Remove kludge.
	(gnat_to_gnu) <N_Return_Statement>: When not optimizing, force labels
	associated with user returns to be preserved.
	(gnat_to_gnu): Add special code to deal with boolean rvalues.
	* gcc-interface/utils2.c (compare_arrays): Set input_location on all
	comparisons.
	(build_unary_op) <ADDR_EXPR>: Call build_fold_addr_expr.
	<INDIRECT_REF>: Call build_fold_indirect_ref.

2010-04-15  Joel Sherrill  <joel.sherrill@oarcorp.com>

	* g-socket.adb: A target can have multiple missing errno's.  This
	will result in multiple errno's being defined as -1.  Because of this
	we can not use a case but must use a series of if's to avoid 
	a duplicate case error in GNAT.Sockets.Resolve_Error.

2010-04-15  Eric Botcazou  <ebotcazou@adacore.com>

	* gcc-interface/trans.c (call_to_gnu): Open a nesting level if this is
	a statement.  Otherwise, if at top-level, push the processing of the
	elaboration routine.  In the misaligned case, issue the error messages
	again on entry and create the temporary explicitly.  Do not issue them
	for CONSTRUCTORs.
	For a function call, emit the range check if necessary.
	In the copy-in copy-out case, create the temporary for the return
	value explicitly.
	Do not unnecessarily convert by-ref parameters to the formal's type.
	Remove obsolete guards in conditions.
	(gnat_to_gnu) <N_Assignment_Statement>: For a function call, pass the
	target to call_to_gnu in all cases.
	(gnat_gimplify_expr) <ADDR_EXPR>: Remove handling of SAVE_EXPR.
	(addressable_p) <CONSTRUCTOR>: Return false if not static.
	<COMPOUND_EXPR>: New case.
	* gcc-interface/utils2.c (build_unary_op) <ADDR_EXPR>: Fold a compound
	expression if it has unconstrained array type.
	(gnat_mark_addressable) <COMPOUND_EXPR>: New case.
	(gnat_stabilize_reference) <COMPOUND_EXPR>: Stabilize operands on an
	individual basis.

2010-04-15  Eric Botcazou  <ebotcazou@adacore.com>

	* gcc-interface/trans.c (gigi): Do not start statement group.
	(Compilation_Unit_to_gnu): Set current_function_decl to NULL.
	Start statement group and push binding level here...
	(gnat_to_gnu) <N_Compilation_Unit>: ...and not here.
	Do not push fake contexts at top level.  Remove redundant code.
	(call_to_gnu): Rename a local variable and constify another.
	* gcc-interface/utils.c (gnat_pushlevel): Fix formatting nits.
	(set_current_block_context): Set it as the group's block.
	(gnat_init_decl_processing): Delete unrelated init code.
	(end_subprog_body): Use NULL_TREE.

2010-04-15  Eric Botcazou  <ebotcazou@adacore.com>

	* gcc-interface/trans.c (call_to_gnu): Do not unnecessarily force
	side-effects of actual parameters before the call.

2010-04-15  Eric Botcazou  <ebotcazou@adacore.com>

	* gcc-interface/decl.c (validate_size): Reorder, remove obsolete test
	and warning.
	(set_rm_size): Reorder and remove obsolete test.

2010-04-14  Eric Botcazou  <ebotcazou@adacore.com>

	* gcc-interface/gigi.h: Reorder declarations and tweak comments.
	(gigi): Adjust ATTRIBUTE_UNUSED markers.
	* gcc-interface/gadaint.h: New file.
	* gcc-interface/trans.c: Include it in lieu of adaint.h.  Reorder.
	(__gnat_to_canonical_file_spec): Remove declaration.
	(number_names): Delete.
	(number_files): Likewise.
	(gigi): Adjust.
	* gcc-interface/Make-lang.in (ada/trans.o): Adjust dependencies to
	above change.

2010-04-14  Eric Botcazou  <ebotcazou@adacore.com>

	* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Class_Wide_Type>: Fix
	comment.
	* gcc-interface/trans.c (process_freeze_entity): Use local copy of
	Ekind.  Return early for class-wide types.  Do not compute initializer
	unless necessary.  Reuse the tree for an associated class-wide type
	only if processing its root type.

2010-04-13  Joel Sherrill  <joel.sherrill@oarcorp.com>

	* gsocket.h: Run-time can no longer be built without network
	OS headers available.  Changing RTEMS GNAT build procedure to
	reflect this and letting run-time build use network .h files.

2010-04-13  Duncan Sands  <baldrick@free.fr>

	* gcc-interface/misc.c (gnat_eh_type_covers): Remove.
	* gcc-interface/trans.c (Exception_Handler_to_gnu_zcx): Update comment.

2010-04-13  Eric Botcazou  <ebotcazou@adacore.com>

	* gcc-interface/gigi.h (standard_datatypes): Add ADT_parent_name_id.
	(parent_name_id): New macro.
	* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Record_Type>: Use it.
	* gcc-interface/trans.c (gigi): Initialize it.
	(lvalue_required_p) <N_Type_Conversion>: New case.
	<N_Qualified_Expression>: Likewise.
	<N_Allocator>: Likewise.
	* gcc-interface/utils.c (convert): Try to properly upcast tagged types.

2010-04-13  Eric Botcazou  <ebotcazou@adacore.com>

	* gcc-interface/ada-tree.h (TYPE_BY_REFERENCE_P): Delete.
	(DECL_CONST_ADDRESS_P): New macro.
	(SET_DECL_ORIGINAL_FIELD_TO_FIELD): Likewise.
	(SAME_FIELD_P): Likewise.
	* gcc-interface/decl.c (constructor_address_p): New static function.
	(gnat_to_gnu_entity) <object>: Set DECL_CONST_ADDRESS_P according to
	the return value of above function.
	(gnat_to_gnu_entity) <E_Record_Type>: Force BLKmode for all types
	passed by reference.
	<E_Record_Subtype>: Likewise.
	Set TREE_ADDRESSABLE on the type if it passed by reference.
	(make_packable_type): Use SET_DECL_ORIGINAL_FIELD_TO_FIELD.
	(create_field_decl_from): Likewise.
	(substitute_in_type): Likewise.
	(purpose_member_field): Use SAME_FIELD_P.
	* gcc-interface/misc.c (must_pass_by_ref): Test TREE_ADDRESSABLE.
	* gcc-interface/trans.c (lvalue_required_p): Add ADDRESS_OF_CONSTANT
	parameter and adjust recursive calls.
	<N_Explicit_Dereference>: New case.
	<N_Object_Declaration>: Return 1 if the object is of a class-wide type.
	Adjust calls to lvalue_required_p.  Do not return the initializer of a
	DECL_CONST_ADDRESS_P constant if an lvalue is required for it.
	(call_to_gnu): Delay issuing error message for a misaligned actual and
	avoid the associated back-end assertion.  Test TREE_ADDRESSABLE.
	(gnat_gimplify_expr) <ADDR_EXPR>: Handle non-static constructors.
	* gcc-interface/utils.c (make_dummy_type): Set TREE_ADDRESSABLE if the
	type is passed by reference.
	(convert) <CONSTRUCTOR>: Convert in-place in more cases.
	* gcc-interface/utils2.c (build_cond_expr): Drop TYPE_BY_REFERENCE_P.
	(build_simple_component_ref): Use SAME_FIELD_P.

2010-04-12  Eric Botcazou  <ebotcazou@adacore.com>

	* gcc-interface/trans.c (Identifier_to_gnu): Use boolean variable.
	(call_to_gnu): Test gigi's flag TYPE_BY_REFERENCE_P instead of calling
	front-end's predicate Is_By_Reference_Type.  Use consistent order and
	remove ??? comment.  Use original conversion in all cases, if any.
	* gcc-interface/utils.c (make_dummy_type): Minor tweak.
	(convert): Use local copy in more cases.
	<INDIRECT_REF>: Remove deactivated code.
	(unchecked_convert): Use a couple of local copies.

2010-04-11  Eric Botcazou  <ebotcazou@adacore.com>

	* gcc-interface/trans.c (lvalue_required_for_attribute_p): New static
	function.
	(lvalue_required_p) <N_Attribute_Reference>: Call it.
	(gnat_to_gnu) <N_Selected_Component>: Prevent build_component_ref from
	folding the result only if lvalue_required_for_attribute_p is true.
	* gcc-interface/utils.c (maybe_unconstrained_array): Pass correctly
	typed constant to build_component_ref.
	(unchecked_convert): Likewise.
	* gcc-interface/utils2.c (maybe_wrap_malloc): Likewise.
	(build_allocator): Likewise.

2010-04-11  Eric Botcazou  <ebotcazou@adacore.com>

	* gcc-interface/utils2.c (build_cond_expr): Take the address and
	dereference if the result type is passed by reference.

2010-04-11  Eric Botcazou  <ebotcazou@adacore.com>

	* gcc-interface/trans.c (Case_Statement_to_gnu): Bool-ify variable.
	(gnat_to_gnu) <N_Null_Statement>: When not optimizing, generate a
	goto to the next statement.

2010-04-09  Eric Botcazou  <ebotcazou@adacore.com>

	* gcc-interface/gigi.h (maybe_variable): Delete.
	(protect_multiple_eval): Likewise.
	(maybe_stabilize_reference): Likewise.
	(gnat_save_expr): Declare.
	(gnat_protect_expr): Likewise.
	(gnat_stabilize_reference): Likewise.
	* gcc-interface/decl.c (gnat_to_gnu_entity) <object>: Use
	gnat_stabilize_reference.
	(maybe_variable): Delete.
	(elaborate_expression_1): Use gnat_save_expr.
	* gcc-interface/trans.c (Attribute_to_gnu): Use gnat_protect_expr.
	(call_to_gnu): Pass NULL to gnat_stabilize_reference.
	(gnat_to_gnu) <N_Object_Declaration>: Use gnat_save_expr.
	<N_Slice>: Use gnat_protect_exp.
	<N_Selected_Component>: Pass NULL to gnat_stabilize_reference.
	<N_In>: Use gnat_protect_expr.
	Pass NULL to gnat_stabilize_reference.
	(build_unary_op_trapv): Use gnat_protect_expr.
	(build_binary_op_trapv): Likewise.
	(emit_range_check): Likewise.
	(emit_index_check): Likewise.
	(convert_with_check): Likewise.
	(protect_multiple_eval): Move to utils2.c file.
	(maybe_stabilize_reference): Merge into...
	(gnat_stabilize_reference): ...this.  Move to utils2.c file.
	(gnat_stabilize_reference_1): Likewise.
	* gcc-interface/utils.c (convert_to_fat_pointer): Use gnat_protect_expr
	instead of protect_multiple_eval.
	* gcc-interface/utils2.c (compare_arrays): Likewise.
	(nonbinary_modular_operation): Likewise.
	(maybe_wrap_malloc): Likewise.
	(build_allocator): Likewise.
	(gnat_save_expr): New function.
	(gnat_protect_expr): Rename from protect_multiple_eval.  Early return
	in common cases.  Propagate TREE_READONLY onto dereferences.
	(gnat_stabilize_reference_1): Move from trans.c file.
	(gnat_stabilize_reference): Likewise.

2010-04-09  Eric Botcazou  <ebotcazou@adacore.com>

	* gcc-interface/gigi.h (gnat_mark_addressable): Rename parameter.
	* gcc-interface/decl.c (maybe_variable): Do not set TREE_STATIC on _REF
	node.  Use the type of the operand to set TREE_READONLY.
	* gcc-interface/trans.c (Identifier_to_gnu): Do not set TREE_STATIC on
	_REF node.  Do not overwrite TREE_READONLY.
	(call_to_gnu): Rename local variable and fix various nits.  In the
	copy-in/copy-out case, build the SAVE_EXPR manually.
	(convert_with_check): Call protect_multiple_eval in lieu of save_expr
	and fold the computations.
	(protect_multiple_eval): Always save entire fat pointers.
	(maybe_stabilize_reference): Minor tweaks.
	(gnat_stabilize_reference_1): Likewise.  Do not deal with tcc_constant,
	tcc_type and tcc_statement.
	* gcc-interface/utils.c (convert_to_fat_pointer): Call
	protect_multiple_eval in lieu of save_expr.
	(convert): Minor tweaks.
	(maybe_unconstrained_array): Do not set TREE_STATIC on _REF node.
	(builtin_type_for_size): Call gnat_type_for_size directly.
	* gcc-interface/utils2.c (contains_save_expr_p): Delete.
	(contains_null_expr): Likewise
	(gnat_build_constructor): Do not call it.
	(compare_arrays): Deal with all side-effects, use protect_multiple_eval
	instead of gnat_stabilize_reference to protect the operands.
	(nonbinary_modular_operation): Call protect_multiple_eval in lieu of
	save_expr.
	(maybe_wrap_malloc): Likewise.
	(build_allocator): Likewise.
	(build_unary_op) <INDIRECT_REF>: Do not set TREE_STATIC on _REF node.
	(gnat_mark_addressable): Rename parameter.

2010-04-08  Eric Botcazou  <ebotcazou@adacore.com>

	* gcc-interface/ada-tree.h (TYPE_RETURNS_UNCONSTRAINED_P): Rename into.
	(TYPE_RETURN_UNCONSTRAINED_P): ...this.
	(TYPE_RETURNS_BY_REF_P): Rename into.
	(TYPE_RETURN_BY_DIRECT_REF_P): ...this.
	(TYPE_RETURNS_BY_TARGET_PTR_P): Delete.
	* gcc-interface/gigi.h (create_subprog_type): Adjust parameter names.
	(build_return_expr): Likewise.
	* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Subprogram_Type>:
	Rename local variables.  If the return Mechanism is By_Reference, pass
	return_by_invisible_ref_p to create_subprog_type instead of toggling
	TREE_ADDRESSABLE.  Test return_by_invisible_ref_p in order to annotate
	the mechanism.  Use regular return for contrained types with non-static
	size and return by invisible reference for unconstrained return types
	with default discriminants.  Update comment.
	* gcc-interface/trans.c (Subprogram_Body_to_gnu): If the function
	returns by invisible reference, turn the RESULT_DECL into a pointer.
	Do not handle DECL_BY_REF_P in the CICO case here.
	(call_to_gnu): Remove code handling return by target pointer.  For a
	function call, if the return type has non-constant size, generate the
	assignment with an INIT_EXPR.
	(gnat_to_gnu) <N_Return_Statement>: Remove dead code in the CICO case.
	If the function returns by invisible reference, build the copy return
	operation manually.
	(add_decl_expr): Initialize the variable with an INIT_EXPR.
	* gcc-interface/utils.c (create_subprog_type): Adjust parameter names.
	Adjust for renaming of macros.  Copy the node only when necessary.
	(create_subprog_decl): Do not toggle TREE_ADDRESSABLE on the return
	type, only change DECL_BY_REFERENCE on the RETURN_DECL.
	(convert_from_reference): Delete.
	(is_byref_result): Likewise.
	(gnat_genericize_r): Likewise.
	(gnat_genericize): Likewise.
	(end_subprog_body): Do not call gnat_genericize.
	* gcc-interface/utils2.c (build_binary_op) <INIT_EXPR>: New case.
	(build_return_expr): Adjust parameter names, logic and comment.

2010-04-07  Eric Botcazou  <ebotcazou@adacore.com>

	* exp_pakd.adb (Create_Packed_Array_Type): Always use a modular type
	if the size is small enough.  Propagate the alignment if there is an
	alignment clause on the original array type.
	* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Modular_Integer_Subtype>
	Deal with under-aligned packed array types.  Copy the size onto the
	justified modular type and don't lay it out again.  Likewise for the
	padding type built for other under-aligned subtypes.
	* gcc-interface/utils.c (finish_record_type): Do not set a default mode
	on the type.

2010-04-07  Eric Botcazou  <ebotcazou@adacore.com>

	* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Procedure>: Set default
	alignment on the RETURN type built for the Copy-In Copy-Out mechanism.

2010-04-07  Eric Botcazou  <ebotcazou@adacore.com>

	* gcc-interface/trans.c (call_to_gnu): In the return-by-target-ptr case
	do not set the result type if there is a specified target and do not
	convert the result in any cases.
	(protect_multiple_eval): Make direct SAVE_EXPR for CALL_EXPR.
	(maybe_stabilize_reference) <COMPOUND_EXPR>: Merge with CALL_EXPR.

2010-03-10  Eric Botcazou  <ebotcazou@adacore.com>

	* gcc-interface/Makefile.in (SPARC/Solaris): Use sparcv8plus.

2010-02-27  Eric Botcazou  <ebotcazou@adacore.com>

	PR ada/42253
	* gcc-interface/utils2.c (build_binary_op) <EQ_EXPR>: Assert that fat
	pointer base types are variant of each other.  Apply special treatment
	for null to fat pointer types in all cases.

2010-01-28  Pascal Obry  <obry@adacore.com>

	* s-win32.ads: Add some missing constants.

2010-01-28  Vincent Celier  <celier@adacore.com>

	* prj-attr-pm.adb (Add_Attribute): Do nothing if To_Package is
	Unknown_Package.

2010-01-28  Robert Dewar  <dewar@adacore.com>

	* gnat_rm.texi: Minor correction

2010-01-27  Pascal Obry  <obry@adacore.com>

	* g-awk.adb: ensure that an AWK session is reusable.

2010-01-27  Vasiliy Fofanov  <fofanov@adacore.com>

	* g-regist.adb (For_Every_Key): Fix previous change.
	Minor reformatting.

2010-01-27  Thomas Quinot  <quinot@adacore.com>

	* lib-writ.ads: Current version of spec for new N (note) ALI lines

2010-01-27  Yannick Moy  <moy@adacore.com>

	* a-cdlili.adb (Insert): Correct exception message when cursor
	designates wrong list.

2010-01-27  Vincent Celier  <celier@adacore.com>

	* gnatcmd.adb: When there is only one main specified, the package
	support Switches (<main>) and attribute Switches is specified for the
	main, use these switches, instead of Default_Switches ("Ada").

2010-01-27  Robert Dewar  <dewar@adacore.com>

	* sem_prag.adb, par-prag.adb, snames.ads-tmpl: pragma Dimension initial
	implementation.
	* exp_disp.adb: Minor reformatting

2010-01-27  Tristan Gingold  <gingold@adacore.com>

	* seh_init.c: Use __ImageBase instead of _ImageBase.

2010-01-27  Javier Miranda  <miranda@adacore.com>

	* exp_disp.ads, exp_disp.adb (Expand_Interface_Thunk): Modify the
	profile of interface thunks. The type of the controlling formal is now
	the covered interface type (instead of the target tagged type).

2010-01-27  Sergey Rybin  <rybin@adacore.com>

	* gnat_rm.texi, gnat_ugn.texi: Update gnatcheck doc.

2010-01-27  Robert Dewar  <dewar@adacore.com>

	* sinput.ads, sinput.adb (Sloc_Range): Applies to all nodes, formal
	changed from Expr to N.

2010-01-26  Thomas Quinot  <quinot@adacore.com>

	* gnat_ugn.texi: Adjust documentation of -gnatz switches.
	* usage.adb: Replace line for -gnatz with two lines for -gnatzc and
	-gnatzr.

2010-01-26  Vincent Celier  <celier@adacore.com>

	* prj-attr.adb: Add new attribute Library_Install_Name_Option
	Replace attribute Run_Path_Origin_Supported with Run_Path_Origin
	* prj-nmsc.adb (Process_Project_Level_Simple_Attributes): Process
	attributes Run_Path_Option and Library_Install_Name_Option.
	* prj.ads (Project_Configuration): Replace component
	Run_Path_Origin_Supported with component Run_Path_Origin. Add new
	component Library_Install_Name_Option.
	* snames.ads-tmpl: Add new standard name Library_Install_Name_Option
	Replace Run_Path_Origin_Supported with Run_Path_Origin

2010-01-26  Ed Schonberg  <schonberg@adacore.com>

	* sem_ch8.adb (Use_One_Package): Within an instance, an actual package
	is not hidden by a homograph declared in another actual package.

2010-01-26  Robert Dewar  <dewar@adacore.com>

	* par_sco.adb (Traverse_Declarations_Or_Statements): Only generate
	decisions for pragmas Assert, Check, Precondition, Postcondition if
	-gnata set.
	* scos.ads: Update comments.
	* get_scos.adb, put_scos.adb: Minor fix to code reading statement SCOs.
	Also remove obsolete code for CT (exit point) SCOs.

2010-01-26  Thomas Quinot  <quinot@adacore.com>

	* switch-c.adb: Fix handling of -gnatz*

2010-01-26  Robert Dewar  <dewar@adacore.com>

	* par_sco.adb (Traverse_Declarations_Or_Statements): Separate F/W
	qualifiers for FOR/WHILE loops
	* scos.ads: Use separate type letters F/W for for/while loops

2010-01-26  Robert Dewar  <dewar@adacore.com>

	* get_scos.adb (Get_SCOs): Implement new form of CS entries (multiple
	entries per line, one for each statement in the sequence).
	* par_sco.adb (Traverse_Declarations_Or_Statements): Increase array
	size from 100 to 10_000 for SC_Array to avoid any real possibility of
	overflow. Output decisions in for loops.
	Exclude labels from CS lines.
	* scos.ads: Clarify that label is not included in the entry point

2010-01-26  Robert Dewar  <dewar@adacore.com>

	* par_sco.adb (Traverse_Declarations_Or_Statments): Implement new
	format of statement sequence SCO entries (one location/statement).
	* put_scos.adb (Put_SCOs): Implement new format of CS lines
	* scos.ads: Update comments.
	* sem_eval.adb: Minor reformatting.

2010-01-26  Robert Dewar  <dewar@adacore.com>

	* par_sco.ads, par_sco.adb (Set_Statement_Entry): New handling of exits
	(Extend_Statement_Sequence): New procedures
	(Traverse_Declarations_Or_Statements): New handling for exits.

2010-01-26  Robert Dewar  <dewar@adacore.com>

	* par_sco.adb (Traverse_Declarations_Or_Statements): Add processing for
	Case.

2010-01-26  Robert Dewar  <dewar@adacore.com>

	* par_sco.adb (Is_Logical_Operator): Exclude AND/OR/XOR
	* scos.ads: Clarify handling of logical operators

2010-01-26  Arnaud Charlet  <charlet@adacore.com>

	* s-tpoben.adb: Update comments.

2010-01-26  Robert Dewar  <dewar@adacore.com>

	* freeze.adb (Set_Small_Size): Don't set size if alignment clause
	present.

2010-01-26  Robert Dewar  <dewar@adacore.com>

	* scos.ads: Clean up documentation, remove obsolete XOR references
2010-01-26  Vincent Celier  <celier@adacore.com>

	* gnat_ugn.texi: Complete documentation on the restrictions for
	combined options in -gnatxxx switches.
	Fix typo.

2010-01-26  Arnaud Charlet  <charlet@adacore.com>

	* s-tpoben.adb (Initialize_Protection_Entries): If a PO is created from
	a controlled operation, abort is already deferred at this point, so we
	need to use Defer_Abort_Nestable.

2010-01-26  Vincent Celier  <celier@adacore.com>

	* prj-conf.adb (Get_Config_Switches): Check for a default language for
	a project extending a project with no languages.

2010-01-26  Vincent Celier  <celier@adacore.com>

	* switch-c.adb (Scan_Front_End_Switches): Take into account options
	that follow -gnatef.
	Allow -gnateG to be followed by other options.

2010-01-26  Robert Dewar  <dewar@adacore.com>

	* s-commun.ads, s-osprim-mingw.adb, s-stchop-vxworks.adb, sem_aggr.adb,
	s-vxwext.adb, sem_ch10.adb, sem_eval.adb, sem_prag.adb: Minor
	reformatting.

2010-01-26  Vasiliy Fofanov  <fofanov@adacore.com>

	* g-regist.adb, g-regist.ads (For_Every_Key): New generic procedure
	that allows to iterate over all subkeys of a key.

2010-01-26  Ed Falis  <falis@adacore.com>

	* sysdep.c: enable NFS for VxWorks MILS
	* env.c: enable __gnat_environ for VxWorks MILS
	* gcc-interface/Makefile.in: Add VxWorks MILS target pairs.

2010-01-25  Bob Duff  <duff@adacore.com>

	* sem_aggr.adb (Resolve_Array_Aggregate): Check for the case where this
	is an internally-generated positional aggregate, and the bounds are
	already correctly set. We don't want to overwrite those bounds with
	bounds determined by context.

2010-01-25  Robert Dewar  <dewar@adacore.com>

	* g-sercom.ads, gnatcmd.adb, gnatlink.adb, a-ststio.adb, exp_ch6.adb,
	exp_ch9.adb, g-sechas.ads: Minor reformatting.

2010-01-25  Thomas Quinot  <quinot@adacore.com>

	* s-commun.adb (Last_Index): Count must be converted to SEO (a signed
	integer type) before subtracting 1, otherwise the computation may wrap
	(because size_t is modular) and cause the conversion to fail.

2010-01-25  Ed Falis  <falis@adacore.com>

	* sysdep.c, init.c: Adapt to support full run-time on VxWorks MILS.

2010-01-25  Vincent Celier  <celier@adacore.com>

	* prj-attr.adb: New attribute Run_Path_Origin_Required
	* prj-nmsc.adb (Process_Project_Level_Simple_Attributes): Process new
	attribute Run_Path_Origin_Required.
	* prj.ads (Project_Configuration): New component
	Run_Path_Origin_Supported.
	* snames.ads-tmpl: New standard name Run_Path_Origin_Required

2010-01-25  Ed Schonberg  <schonberg@adacore.com>

	* sem_aggr.adb (Resolve_Array_Aggregate): If the bounds in a choice
	have errors, do not continue resolution of the aggregate.
	* sem_eval.adb (Eval_Indexed_Component): Do not attempt to evaluate if
	the array type indicates an error.

2010-01-25  Bob Duff  <duff@adacore.com>

	* sinfo.ads: Minor comment fixes.

2010-01-25  Bob Duff  <duff@adacore.com>

	* exp_ch4.adb, exp_aggr.adb: Minor comment fixes and code clean up.

2010-01-25  Arnaud Charlet  <charlet@adacore.com>

	* gnatvsn.ads (Current_Year): Update.

2010-01-25  Florian Villoing  <villoing@adacore.com>

	* gnat_ugn.texi: Fix typo.

2010-01-25  Thomas Quinot  <quinot@adacore.com>

	* scos.ads: Update specification.

2010-01-25  Ed Schonberg  <schonberg@adacore.com>

	* sem_ch6.adb (Process_PPCs): If a postcondition is present and the
	enclosing subprogram has no previous spec, attach postcondition
	procedure to the defining entity for the body.

2010-01-25  Ed Schonberg  <schonberg@adacore.com>

	* exp_aggr.adb (Build_Record_Aggr_Code); Do not generate call to
	initialization procedure of the ancestor part of an extension aggregate
	if it is an interface type.

2010-01-25  Vincent Celier  <celier@adacore.com>

	* gnatlink.adb (Process_Binder_File): The directory for the shared
	version of libgcc in the run path options is found in the subdirectory
	indicated by __gnat_default_libgcc_subdir.
	* link.c: Declare new const char * __gnat_default_libgcc_subdir for
	each platform.

2010-01-25  Ed Schonberg  <schonberg@adacore.com>

	* sem_prag.adb: More flexible pragma Annotate.

2010-01-22  Eric Botcazou  <ebotcazou@adacore.com>

	* system-linux-armel.ads (Stack_Check_Probes): Set to True.
	* system-linux-armeb.ads (Stack_Check_Probes): Likewise.

2010-01-18  Eric Botcazou  <ebotcazou@adacore.com>

	* gcc-interface/utils.c (create_var_decl_1): Fix formatting nits.

2010-01-18  Jan Hubicka  <jh@suse.cz>

	PR middle-end/42068
	* gcc-interface/utils.c (create_var_decl_1): Do not set COMMON flag for
	unit local variables.

2010-01-17  Laurent GUERBY  <laurent@guerby.net>

	* gcc-interface/Makefile.in: Fix typo in arm*-*-linux-gnueabi.

2010-01-11  Mikael Pettersson  <mikpe@it.uu.se>

	* gcc-interface/Makefile.in: Add arm*-*-linux-gnueabi.
	* system-linux-armeb.ads, system-linux-armel.ads: New files.

2010-01-09  Simon Wright  <simon@pushface.org>

	PR ada/42626
	* gcc-interface/Makefile.in (gnatlib-shared-darwin): Add missing
	end-quote.



Copyright (C) 2010 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.
