# Tests for ms_abi to sysv_abi calls.
# Copyright (C) 2016-2017 Free Software Foundation, Inc.
# Contributed by Daniel Santos <daniel.santos@pobox.com>
#
# This file is part of GCC.
#
# GCC is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3, or (at your option)
# any later version.
#
# GCC is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# Under Section 7 of GPL version 3, you are granted additional
# permissions described in the GCC Runtime Library Exception, version
# 3.1, as published by the Free Software Foundation.
#
# You should have received a copy of the GNU General Public License and
# a copy of the GCC Runtime Library Exception along with this program;
# see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
# <http://www.gnu.org/licenses/>.

# Exit immediately if this isn't a native x86_64 target.
if { (![istarget x86_64-*-*] && ![istarget i?86-*-*])
     || ![is-effective-target lp64] || ![isnative] } then {
    unsupported "$subdir"
    return
}

global GCC_RUNTEST_PARALLELIZE_DIR

load_lib gcc-dg.exp

proc runtest_ms_sysv { cflags generator_args } {
    global GCC_UNDER_TEST HOSTCXX HOSTCXXFLAGS tmpdir srcdir subdir \
	   parallel_dir next_test

    set objdir "$tmpdir/ms-sysv"
    set generator "$tmpdir/ms-sysv-generate.exe"
    set generated_header "$objdir/ms-sysv-generated.h"
    set do_test_o "$objdir/do-test.o"
    set ms_sysv_o "$objdir/ms-sysv.o"
    set ms_sysv_exe "$objdir/ms-sysv.exe"
    set status 0
    set warn_flags "-Wall"
    set this_test $next_test
    incr next_test

    # Do parallelization here
    if [catch {set fd [open "$parallel_dir/$this_test" \
			    [list RDWR CREAT EXCL]]} ] {
	if { [lindex $::errorCode 1] eq "EEXIST" } then {
	    # Another job is running this test
	    return
	} else {
	    error "Failed to open $parallel_dir/$this_test: $::errorCode"
	    set status 1
	}
    } else {
      close $fd
    }

    # Detect when hard frame pointers are enabled (or required) so we know not
    # to generate bp clobbers.
    if [regexp "^(.+ +| *)-(O0|fno-omit-frame-pointer|p|pg)( +.*)?$" \
	       $cflags match] then {
	set generator_args "$generator_args --omit-rbp-clobbers"
    }

    set descr "$subdir CFLAGS=\"$cflags\" generator_args=\"$generator_args\""
    verbose "$tmpdir: Running test $descr" 1

    # Cleanup any previous test in objdir
    file delete -force $objdir
    file mkdir $objdir

    # Build the generator (only needs to be done once).
    set src "$srcdir/$subdir/gen.cc"
    if { $status == 0 } then {
	if { (![file exists "$generator"]) || ([file mtime "$generator"]
					    < [file mtime "$src"]) } {
	    # Temporarily switch to the environment for the host compiler.
	    restore_ld_library_path_env_vars
	    set cxx "$HOSTCXX $HOSTCXXFLAGS $warn_flags -std=c++11"
	    set status [remote_exec host "$cxx -o $generator $src"]
	    set status [lindex $status 0]
	    set_ld_library_path_env_vars
	    if { $status != 0 } then {
		warning "Could not build $subdir generator"
	    }
	}
    }

    # Generate header
    if { $status == 0 } then {
	set status [remote_exec host "$generator $generator_args $generated_header"]
	set status [lindex $status 0]
	if { $status != 0 } then {
	    warning "Could not generate $generated_header"
	}
    }

    set cc "$GCC_UNDER_TEST -I$objdir -I$srcdir/$subdir $cflags $warn_flags"

    # Assemble do-test.S
    set src "$srcdir/$subdir/do-test.S"
    if { $status == 0 } then {
	set status [remote_exec build "$cc -c -o $do_test_o $src"]
	set status [lindex $status 0]
	if { $status != 0 } then {
	    warning "Could not assemble $src"
	}
    }

    # Build ms-sysv.c
    set src "$srcdir/$subdir/ms-sysv.c"
    if { $status == 0 } then {
	set status [remote_exec build "$cc -c -o $ms_sysv_o $src" "" "" "" 1200]
	set status [lindex $status 0]
	if { $status != 0 } then {
	    warning "Could not build $src."
	}
    }

    # Link
    if { $status == 0 } then {
	set status [remote_exec build "$cc -o $ms_sysv_exe $ms_sysv_o $do_test_o"]
	set status [lindex $status 0]
	if { $status != 0 } then {
	    warning "Link failed."
	}
    }

    # Execute
    if { $status == 0 } then {
	set status [remote_exec build "$ms_sysv_exe"]
	set status [lindex $status 0]
    }

    if { $status != 0 } then {
	fail $descr
    } else {
	pass $descr
    }
}

dg-init

# Setup parallelization
set next_test 0
set parallel_dir "$env(GCC_RUNTEST_PARALLELIZE_DIR)/abi-ms-sysv"
file mkdir "$env(GCC_RUNTEST_PARALLELIZE_DIR)"
file mkdir "$parallel_dir"

if { ![file isdirectory "$parallel_dir"] } then {
    error "Failed to create directory $parallel_dir: $::errorCode"
    return
}

set gen_opts "-p0-5"
set all_options [list "-O2" "-O0 -g3"]

# Run without -mcall-ms2sysv-xlogues always
foreach opt $all_options {
    runtest_ms_sysv "$opt" "$gen_opts"
}

# Skip -mcall-ms2sysv-xlogues on Windows (not supported)
if { ![istarget *-*-cygwin*] && ![istarget *-*-mingw*] } {
    foreach opt $all_options {
	runtest_ms_sysv "-mcall-ms2sysv-xlogues $opt" "$gen_opts"
    }
}

dg-finish
