; Options for the S/390 / zSeries port of the compiler.

; Copyright (C) 2005, 2006, 2007, 2010, 2011 Free Software Foundation, Inc.
;
; This file is part of GCC.
;
; GCC is free software; you can redistribute it and/or modify it under
; the terms of the GNU General Public License as published by the Free
; Software Foundation; either version 3, or (at your option) any later
; version.
;
; GCC is distributed in the hope that it will be useful, but WITHOUT ANY
; WARRANTY; without even the implied warranty of MERCHANTABILITY or
; FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
; for more details.
;
; You should have received a copy of the GNU General Public License
; along with GCC; see the file COPYING3.  If not see
; <http://www.gnu.org/licenses/>.

HeaderInclude
config/s390/s390-opts.h

; The architecture name to use in diagnostics.
Variable
const char *s390_arch_string

; Which cpu are we tuning for.
Variable
enum processor_type s390_tune = PROCESSOR_max

Variable
int s390_tune_flags

; Which instruction set architecture to use.
Variable
enum processor_type s390_arch

Variable
int s390_arch_flags

Variable
HOST_WIDE_INT s390_warn_framesize = 0

m31
Target Report RejectNegative Negative(m64) InverseMask(64BIT)
31 bit ABI

m64
Target Report RejectNegative Negative(m31) Mask(64BIT)
64 bit ABI

march=
Target RejectNegative Joined Enum(s390_arch_option)
Generate code for given CPU

Enum
Name(s390_arch_option) Type(enum s390_arch_option)

EnumValue
Enum(s390_arch_option) String(g5) Value(s390_arch_g5)

EnumValue
Enum(s390_arch_option) String(g6) Value(s390_arch_g6)

EnumValue
Enum(s390_arch_option) String(z900) Value(s390_arch_z900)

EnumValue
Enum(s390_arch_option) String(z990) Value(s390_arch_z990)

EnumValue
Enum(s390_arch_option) String(z9-109) Value(s390_arch_z9_109)

EnumValue
Enum(s390_arch_option) String(z9-ec) Value(s390_arch_z9_ec)

EnumValue
Enum(s390_arch_option) String(z10) Value(s390_arch_z10)

EnumValue
Enum(s390_arch_option) String(z196) Value(s390_arch_z196)

mbackchain
Target Report Mask(BACKCHAIN)
Maintain backchain pointer

mdebug
Target Report Mask(DEBUG_ARG)
Additional debug prints

mesa
Target Report RejectNegative Negative(mzarch) InverseMask(ZARCH)
ESA/390 architecture

mhard-dfp
Target Report Mask(HARD_DFP)
Enable decimal floating point hardware support

mhard-float
Target Report RejectNegative Negative(msoft-float) InverseMask(SOFT_FLOAT, HARD_FLOAT)
Enable hardware floating point

mlong-double-128
Target Report RejectNegative Negative(mlong-double-64) Mask(LONG_DOUBLE_128)
Use 128-bit long double

mlong-double-64
Target Report RejectNegative Negative(mlong-double-128) InverseMask(LONG_DOUBLE_128)
Use 64-bit long double

mpacked-stack
Target Report Mask(PACKED_STACK)
Use packed stack layout

msmall-exec
Target Report Mask(SMALL_EXEC)
Use bras for executable < 64k

msoft-float
Target Report RejectNegative Negative(mhard-float) Mask(SOFT_FLOAT)
Disable hardware floating point

mstack-guard=
Target RejectNegative Joined UInteger Var(s390_stack_guard)
Set the max. number of bytes which has to be left to stack size before a trap instruction is triggered

mstack-size=
Target RejectNegative Joined UInteger Var(s390_stack_size)
Emit extra code in the function prologue in order to trap if the stack size exceeds the given limit

mtune=
Target RejectNegative Joined Enum(s390_arch_option)
Schedule code for given CPU

mmvcle
Target Report Mask(MVCLE)
mvcle use

mwarn-dynamicstack
Target RejectNegative Var(s390_warn_dynamicstack_p)
Warn if a function uses alloca or creates an array with dynamic size

mwarn-framesize=
Target RejectNegative Joined
Warn if a single function's framesize exceeds the given framesize

mzarch
Target Report RejectNegative Negative(mesa) Mask(ZARCH)
z/Architecture
