; Options of Andes NDS32 cpu for GNU compiler
; Copyright (C) 2012-2018 Free Software Foundation, Inc.
; Contributed by Andes Technology Corporation.
;
; This file is part of GCC.
;
; GCC is free software; you can redistribute it and/or modify it
; under the terms of the GNU General Public License as published
; by the Free Software Foundation; either version 3, or (at your
; option) any later version.
;
; GCC is distributed in the hope that it will be useful, but WITHOUT
; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
; or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
; License for more details.
;
; You should have received a copy of the GNU General Public License
; along with GCC; see the file COPYING3.  If not see
; <http://www.gnu.org/licenses/>.

HeaderInclude
config/nds32/nds32-opts.h

; ---------------------------------------------------------------
; The following options are designed for aliasing and compatibility options.

EB
Target RejectNegative Alias(mbig-endian)
Generate code in big-endian mode.

EL
Target RejectNegative Alias(mlittle-endian)
Generate code in little-endian mode.


; ---------------------------------------------------------------

mabi=
Target RejectNegative Joined Enum(abi_type) Var(nds32_abi) Init(TARGET_DEFAULT_ABI)
Specify which ABI type to generate code for: 2, 2fp+.

Enum
Name(abi_type) Type(enum abi_type)
Known ABIs (for use with the -mabi= option):

EnumValue
Enum(abi_type) String(2) Value(NDS32_ABI_V2)

EnumValue
Enum(abi_type) String(2fp+) Value(NDS32_ABI_V2_FP_PLUS)

mfloat-abi=soft
Target RejectNegative Alias(mabi=, 2)
Specify use soft floating point ABI which mean alias to -mabi=2.

mfloat-abi=hard
Target RejectNegative Alias(mabi=, 2fp+)
Specify use soft floating point ABI which mean alias to -mabi=2fp+.

; ---------------------------------------------------------------

mreduced-regs
Target Report RejectNegative Negative(mfull-regs) Mask(REDUCED_REGS)
Use reduced-set registers for register allocation.

mfull-regs
Target Report RejectNegative Negative(mreduced-regs) InverseMask(REDUCED_REGS)
Use full-set registers for register allocation.

; ---------------------------------------------------------------

malways-align
Target Mask(ALWAYS_ALIGN)
Always align function entry, jump target and return address.

malign-functions
Target Mask(ALIGN_FUNCTION)
Align function entry to 4 byte.

mbig-endian
Target Undocumented RejectNegative Negative(mlittle-endian) Mask(BIG_ENDIAN)
Generate code in big-endian mode.

mlittle-endian
Target Undocumented RejectNegative Negative(mbig-endian) InverseMask(BIG_ENDIAN)
Generate code in little-endian mode.


mcmov
Target Report Mask(CMOV)
Generate conditional move instructions.

mext-perf
Target Report Mask(EXT_PERF)
Generate performance extension instructions.

mext-perf2
Target Report Mask(EXT_PERF2)
Generate performance extension version 2 instructions.

mext-string
Target Report Mask(EXT_STRING)
Generate string extension instructions.

mv3push
Target Report Mask(V3PUSH)
Generate v3 push25/pop25 instructions.

m16-bit
Target Report Mask(16_BIT)
Generate 16-bit instructions.

mrelax-hint
Target Report Mask(RELAX_HINT)
Insert relax hint for linker to do relaxation.

mvh
Target Report Mask(VH)
Enable Virtual Hosting support.

misr-vector-size=
Target RejectNegative Joined UInteger Var(nds32_isr_vector_size) Init(NDS32_DEFAULT_ISR_VECTOR_SIZE)
Specify the size of each interrupt vector, which must be 4 or 16.

mcache-block-size=
Target RejectNegative Joined UInteger Var(nds32_cache_block_size) Init(NDS32_DEFAULT_CACHE_BLOCK_SIZE)
Specify the size of each cache block, which must be a power of 2 between 4 and 512.

march=
Target RejectNegative Joined Enum(nds32_arch_type) Var(nds32_arch_option) Init(ARCH_V3)
Specify the name of the target architecture.

Enum
Name(nds32_arch_type) Type(enum nds32_arch_type)
Known arch types (for use with the -march= option):

EnumValue
Enum(nds32_arch_type) String(v2) Value(ARCH_V2)

EnumValue
Enum(nds32_arch_type) String(v3) Value(ARCH_V3)

EnumValue
Enum(nds32_arch_type) String(v3m) Value(ARCH_V3M)

EnumValue
Enum(nds32_arch_type) String(v3f) Value(ARCH_V3F)

EnumValue
Enum(nds32_arch_type) String(v3s) Value(ARCH_V3S)

mcmodel=
Target RejectNegative Joined Enum(nds32_cmodel_type) Var(nds32_cmodel_option) Init(CMODEL_LARGE)
Specify the address generation strategy for code model.

Enum
Name(nds32_cmodel_type) Type(enum nds32_cmodel_type)
Known cmodel types (for use with the -mcmodel= option):

EnumValue
Enum(nds32_cmodel_type) String(small) Value(CMODEL_SMALL)

EnumValue
Enum(nds32_cmodel_type) String(medium) Value(CMODEL_MEDIUM)

EnumValue
Enum(nds32_cmodel_type) String(large) Value(CMODEL_LARGE)

mcpu=
Target RejectNegative Joined Enum(nds32_cpu_type) Var(nds32_cpu_option) Init(CPU_N9)
Specify the cpu for pipeline model.

Enum
Name(nds32_cpu_type) Type(enum nds32_cpu_type)
Known cpu types (for use with the -mcpu= option):

EnumValue
Enum(nds32_cpu_type) String(n9) Value(CPU_N9)

mconfig-fpu=
Target RejectNegative Joined Enum(float_reg_number) Var(nds32_fp_regnum) Init(TARGET_CONFIG_FPU_DEFAULT)
Specify a fpu configuration value from 0 to 7; 0-3 is as FPU spec says, and 4-7 is corresponding to 0-3.

Enum
Name(float_reg_number) Type(enum float_reg_number)
Known floating-point number of registers (for use with the -mconfig-fpu= option):

EnumValue
Enum(float_reg_number) String(0) Value(NDS32_CONFIG_FPU_0)

EnumValue
Enum(float_reg_number) String(1) Value(NDS32_CONFIG_FPU_1)

EnumValue
Enum(float_reg_number) String(2) Value(NDS32_CONFIG_FPU_2)

EnumValue
Enum(float_reg_number) String(3) Value(NDS32_CONFIG_FPU_3)

EnumValue
Enum(float_reg_number) String(4) Value(NDS32_CONFIG_FPU_4)

EnumValue
Enum(float_reg_number) String(5) Value(NDS32_CONFIG_FPU_5)

EnumValue
Enum(float_reg_number) String(6) Value(NDS32_CONFIG_FPU_6)

EnumValue
Enum(float_reg_number) String(7) Value(NDS32_CONFIG_FPU_7)

mctor-dtor
Target Report
Enable constructor/destructor feature.

mrelax
Target Report
Guide linker to relax instructions.

mext-fpu-fma
Target Report Mask(EXT_FPU_FMA)
Generate floating-point multiply-accumulation instructions.

mext-fpu-sp
Target Report Mask(FPU_SINGLE)
Generate single-precision floating-point instructions.

mext-fpu-dp
Target Report Mask(FPU_DOUBLE)
Generate double-precision floating-point instructions.
