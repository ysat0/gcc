; Options for the NS32000 port of the compiler.

; Copyright (C) 2005 Free Software Foundation, Inc.
;
; This file is part of GCC.
;
; GCC is free software; you can redistribute it and/or modify it under
; the terms of the GNU General Public License as published by the Free
; Software Foundation; either version 2, or (at your option) any later
; version.
;
; GCC is distributed in the hope that it will be useful, but WITHOUT ANY
; WARRANTY; without even the implied warranty of MERCHANTABILITY or
; FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
; for more details.
;
; You should have received a copy of the GNU General Public License
; along with GCC; see the file COPYING.  If not, write to the Free
; Software Foundation, 59 Temple Place - Suite 330, Boston, MA
; 02111-1307, USA.

m32032
Target RejectNegative
Optimize for 32032

m32081
Target RejectNegative Report Mask(32081)
Use hardware fp

m32332
Target RejectNegative Report Mask(32332)
Optimize for 32332

m32381
Target RejectNegative Report Mask(32381)
Use the 32381 fpu

m32532
Target RejectNegative Report Mask(32532)
Optimize for 32532

mbitfield
Target RejectNegative Report Mask(BITFIELD)
Use bit-field instructions

mhimem
Target RejectNegative Report Mask(HIMEM)
Generate code for high memory

mieee-compare
Target RejectNegative Report Mask(IEEE_COMPARE)
Use IEEE math for fp comparisons

mmult-add
Target RejectNegative Report Mask(MULT_ADD)
Use multiply-accumulate fp instructions

mnobitfield
Target RejectNegative Report InverseMask(BITFIELD)
Do not use bit-field instructions

mnohimem
Target RejectNegative Report InverseMask(HIMEM)
Generate code for low memory

mnoieee-compare
Target RejectNegative Report InverseMask(IEEE_COMPARE)
Do not use IEEE math for fp comparisons

mnomult-add
Target RejectNegative Report InverseMask(MULT_ADD)
Do not use multiply-accumulate fp instructions

mnoregparm
Target RejectNegative Report InverseMask(REGPARM)
Pass all arguments on the stack

mnortd
Target RejectNegative Report InverseMask(RTD)
Use the normal calling convention

mnosb
Target RejectNegative Report InverseMask(SB)
Do not use register sb

mnosrc
Target RejectNegative Report InverseMask(SRC)
Do not use the 'small register classes' kludge

mregparm
Target RejectNegative Report Mask(REGPARM)
Pass some arguments in registers

mrtd
Target RejectNegative Report Mask(RTD)
Use an alternative calling convention

msb
Target RejectNegative Report Mask(SB)
Register sb is zero, use it for absolute addressing

msoft-float
Target RejectNegative
Do not use hardware fp

msrc
Target RejectNegative Report Mask(SRC)
Use the 'small register classes' kludge
