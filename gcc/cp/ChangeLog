2004-04-09  Danny Smith  <dannysmith@users.sourceforge.net>

	* method.c (make_alias_for_thunk): Remove preprocessor guard on
	declaration and definition.

2004-04-08  Danny Smith  <dannysmith@users.sourceforge.net>

	PR c++/14808
	* method.c (use_thunk): Test TARGET_USE_LOCAL_THUNK_ALIAS_P rather
	than ASM_OUTPUT_DEF.

2004-04-08  Jakub Jelinek  <jakub@redhat.com>

	* decl2.c (mark_used): Don't segfault if cfun != NULL but
	current_function_decl == NULL.

2004-04-05  Nathan Sidwell  <nathan@codesourcery.com>

	PR c++/3518
	* pt.c (check_cv_quals_for_unify): Ignore bogus CV quals at outer
	level.

2004-04-05  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>

	* init.c (decl_constant_value): Don't look at DECL_INITIAL
	of PARM_DECL.
	* tree.c (bot_manip, build_min): Don't look at TREE_CONSTANT
	or TREE_SIDE_EFFECTS of a type.

2004-04-02  Nathan Sidwell  <nathan@codesourcery.com>

	PR c++/14007
	* pt.c (check_cv_quals_for_unify): Correct logic for disallowed
	cv-qualifier unification.
	* tree.c (cp_build_qualified_type_real): Renable DR295 logic.

2004-04-02  Jan Hubicka  <jh@suse.cz>

	* cp-lang. (LANG_HOOKS_UPDATE_DECL_AFTER_SAVING): Define.
	* cp-tree.h (cp_update_decl_after_saving): Declare.
	* tree.c (cp_update_decl_after_saving): Define.

2004-04-01  Mark Mitchell  <mark@codesourcery.com>

	PR c++/14803
	* typeck.c (get_delta_difference): Call fold before returning the
	value.

2004-04-01  Richard Henderson  <rth@redhat.com>

	PR c++/14804
	* decl.c (cp_finish_decl): Preserve TREE_READONLY more often.
	* typeck2.c (split_nonconstant_init): Clear TREE_READONLY.

2004-04-01  Mark Mitchell  <mark@codesourcery.com>

	PR c++/14810
	* name-lookup.c (maybe_push_cleanup_level): Robustify.

2004-04-01  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>

	* class.c (VTT_TOP_LEVEL_P): Use unsigned_flag directly.

2004-03-31  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>

	* call.c (joust): Use TYPE_UNSIGNED, not TREE_UNSIGNED.
	* class.c (check_bitfield_decl): Likewise.
	* cvt.c (type_promotes_to): Likewise.
	* decl.c (finish_enum): Likewise.
	* mangle.c (write_builtin_type): Likewise.
	* semantics.c (finish_switch_cond, finish_unary_op_expr): Likewise.
	* typeck.c (type_after_usual_arithmetic_conversions): Likewise.
	(build_binary_op): Likewise.

2004-03-31  Jan Hubicka  <jh@suse.cz>

	* tree.h (optimize_function): Kill prototype.
	* optimize.c (dump_function, optimize_function, dump_finction): Kill.
	* semantics.c (expand_body): Kill.

2004-03-30  Mark Mitchell  <mark@codesourcery.com>

	PR c++/14724
	* decl.c (start_decl_1): Do not decide whether or not to create a
	new cleanup level until after the type has been completed.

	PR c++/14763
	* pt.c (tsubst_default_argument): Clear current_function_decl.

2004-03-30  Zack Weinberg  <zack@codesourcery.com>

	* name-lookup.c, parser.c: Use new shorter form of GTY markers.

2004-03-29  Zack Weinberg  <zack@codesourcery.com>

	* error.c (dump_function_name): If T's DECL_LANG_SPECIFIC
	is null, just print the literal name and return.

2004-03-25  Jason Merrill  <jason@redhat.com>

	PR c++/13294
	* pt.c (maybe_process_partial_specialization): Remember the
	context of a specialization.

2004-03-25  Kazu Hirata  <kazu@cs.umass.edu>

	* cxx-pretty-print.c: Fix comment typos.

2004-03-24  Kazu Hirata  <kazu@cs.umass.edu>

	* cxx-pretty-print.c, cxx-pretty-print.h, decl.h, friend.c:
	Update copyright.

2004-03-23  Ziemowit Laski  <zlaski@apple.com>

	* Make-lang.in (cp/mangle.o): Depend on $(TARGET_H).
	* mangle.c (write_type): Add call to 'mangle_fundamental_type'
	target hook.

2004-03-23  Zack Weinberg  <zack@codesourcery.com>

	PR 12267, 12391, 12560, 13129, 14114, 14133
	* cp-lang.c (c_reset_state): Delete.
	(push_file_scope, pop_file_scope): New stubs.
	* parser.c (c_parse_file): Call sorry() here if called more than once.

2004-03-23  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>

	* typeck.c (build_c_cast): Only look at TREE_CONSTANT_OVERFLOW
	for INTEGER_CST.

2004-03-22  Gabriel Dos Reis  <gdr@integrable-solutions.net>

	* cxx-pretty-print.c (pp_cxx_parameter_declaration_clause): Declare.

2004-03-21  Gabriel Dos Reis  <gdr@integrable-solutions.net>

	* error.c (enum pad): Remove.
	(dump_qualifiers): Likewise.
	(dump_type): Replace dump_qualifiers with pp_cxx_cv_qualifier_seq.
	(dump_aggr_type): Likewise.
	(dump_type_suffix): Likewise.
	(dump_simple_decl): Likewise.
	(dump_function_decl): Likewise.
	(cv_to_string): Likewise.
	(dump_type_prefix): Likewise.  Adjust return void.
	* cxx-pretty-print.c (pp_cxx_cv_qualifier_seq): Move to
	cxx_pretty_print.h.
	(pp_cxx_template_keyword_if_needed): Document.
	(pp_cxx_qualified_id): Document case FUNCTION_DECL.  Tidy.
	(pp_cxx_expression): Handle NON_DEPENDENT_EXPR and
	MUST_NOT_THROW_EXPR.

2004-03-21  Mark Mitchell  <mark@codesourcery.com>

	PR c++/14616
	* decl.c (cp_finish_decl): Compute the size of arrays declared in
	templates, if their type is non-dependent.

2004-03-19  Mark Mitchell  <mark@codesourcery.com>

	* call.c (build_op_delete_call): Do not forget the placement
	arguments when iterating through mutiple delete operators.

	* cp-tree.h (svaed_scope): Remove last_parms.
	(NEW_DELETE_OPNAME_P): New macro.
	(last_function_parms): Remove.
	(do_friend): Adjust prototype.
	* decl.c (grokparms): Return the PARM_DECLs directly, rather than
	using last_function_parms.
	(grokfndecl): Take the PARM_DECLs as an argument, rather than
	using last_function_parms.
	(grokdeclarator): Adjust accordingly.  Do not form METHOD_TYPEs
	for class-specific operator new and operator delete.
	(grok_op_properties): Do not look for allocation functions with
	METHOD_TYPEs.
	(start_function): Use DECL_ARGUMENTS instead of
	last_function_parms.
	* decl.h (last_function_parms): Do not declare.
	* decl2.c (grokclassfn): Do not use last_function_parms.
	* friend.c (do_friend): Remove parmdecls parameter.
	* name-lookup.c (push_to_top_level): Do not save last_function_parms.
	(pop_from_top_level): Do not restore it.
	* pt.c (check_explicit_specialization): Do not adjust
	last_function_parms.

	* name-lookup.c (do_local_using_decl): Create a local binding for
	types brought in via using declarations.

	* name-lookup.c (lookup_arg_dependent): Handle block-scope
	function declarations correctly.

	* semantics.c (finish_id_expression): Correct handling of
	conversion operators to dependent types.

	* typeck.c (lookup_destructor): Allow the use of destructors from
	base classes.

2004-03-19  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>

	* cxx-pretty-print.c (pp_cxx_unqualified_id): Use
	TEMPLATE_TYPE_PARM_INDEX instead of TYPE_FIELDS.
	* search.c (dfs_unuse_fields): Add two more TREE_CODES that mean
	the field is named TEMPLATE_TYPE_PARM_INDEX.

2004-03-19  Giovanni Bajo  <giovannibajo@gcc.gnu.org>

	PR c++/14545
	* parser.c (cp_parser_functional_cast): A cast to anything
	but integral or enumaration type is not an integral constant
	expression.
	* pt.c (value_dependent_expression_p): Handle cast expressions
	without operands (such as "int()").

2004-03-18  Mark Mitchell  <mark@codesourcery.com>

	* semantics.c (finish_pseudo_destructor_expr): Allow differing
	cv-qualification between the type named by the
	pseudo-destructor-name and the object-type.

	* search.c (accessible_base_p): Handle non-proper bases.

	* name-lookup.c (do_nonmember_using_decl): If a using declaration
	refers to a single overloaded function, set the type of the
	function.
	* tree.c (lvalue_type): Simplify.
	* typeck.c (type_unknown_p): Do not assume all OVERLOADs have an
	unknown type.
	(build_unary_op): Handle OVERLOADs with known types.

	* decl.c (duplicate_decls): Do not destroy DECL_ARGUMENTS for
	function templates.

	* parser.c (cp_parser_postfix_expression): Handle the use of
	"typename" in non-dependent contexts.  Convert appropriately when
	when using a qualified name after "->" or ".".

	* call.c (conditional_conversion): Honor the requirement that some
	conversions refer to the original object.

2004-03-18  Mark Mitchell  <mark@codesourcery.com>

	* call.c (build_conditional_expr): Do not call force_rvalue for
	operands of void_type when the conditional expression itself has
	void type.
	* name-lookup.c (pushdecl): Don't consider a declaration of a
	function named "main" to be an overload of a type named "main".
	* parser.c (cp_parser_template_name): Perform name lookup when the
	template name is proceeded by "template" if the qualifying scope
	is non-dependent.
	* typeck.c (composite_pointer_type_r): Correctly handle
	pointer-to-member types.
	(build_const_cast): Likewise.

2004-03-18  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>

	* cp-tree.def (TEMPLATE_TYPE_PARM, TYPEOF_TYPE): Update comments.
	* cp-tree.h (NEW_EXPR_USE_GLOBAL, DELETE_EXPR_USE_GLOBAL): Add check.
	(DELETE_EXPR_USE_VEC, COMPOUND_EXPR_OVERLOADED): Likewise.
	(KOENIG_LOOKUP_P, PTRMEM_OK_P, TEMPLATE_TYPE_PARM_INDEX): Likewise.
	(TYPENAME_TYPE_FULLNAME): Add check and use type.values.
	(TYPEOF_TYPE_EXPR): New macro.
	* class.c (finish_struct_bits): Use TYPE_VFIELD and TYPE_METHODS.
	* error.c (dump_type): Use TYPEOF_TYPE_EXPR.
	* pt.c (tsubst): Likewise.
	* semantics.c (finish_typeof): Likewise.
	* search.c (dfs_unuse_fields): Handle TYPENAME_TYPE, TYPEOF_TYPE,
	and TEMPLATE_TYPE_PARM.
	* typeck.c (comptypes): Use TYPE_ORIG_SIZE_TYPE, not TYPE_DOMAIN.
	(build_array_ref): Use TYPE_DOMAIN, not TYPE_VALUES.

2004-03-16  Mark Mitchell  <mark@codesourcery.com>

	PR c++/14586
	* cp-tree.h (build_new_op): Change prototype.
	(build_x_binary_op): Likewise.
	* call.c (build_new_op): Add overloaded_p parameter.
	* decl2.c (grok_array_decl): Adjust call to build_new_op.
	* parser.c (cp_parser_binary_expression): Note that uses of
	overloaded operators prevents an expression from being considered
	an integral constant.
	* pt.c (tsubst_copy_and_build): Adjust calls to build_new_op and/or
	build_x_binary_op.
	* semantics.c (finish_call_expr): Likewise.
	* typeck.c (rationalize_conditional_expr): Likewise.
	(build_x_indirect_ref): Likewise.
	(build_x_binary_op): Likewise.
	(build_x_unary_op): Likewise.
	(build_x_compound_expr): Likewise.
	(build_modify_expr): Likewise.
	* typeck2.c (build_x_arrow): Likewise.

2004-03-15  Kazu Hirata  <kazu@cs.umass.edu>

	* cp-lang.c, ptree.c: Update copyright.

2004-03-13  Mark Mitchell  <mark@codesourcery.com>

	PR c++/14550
	* parser.c (cp_parser_non_integral_constant_expression): Encode
	more of the idiom that surrounded calls to this function within
	the function itself
	(cp_parser_primary_expression): Adjust accordingly.
	(cp_parser_postfix_expression): Likewise.
	(cp_parser_unary_expression): Likewise.
	(cp_parser_cast_expression): Likewise.
	(cp_parser_assignment_expression): Likewise.
	(cp_parser_expression): Likewise.
	(cp_parser_new_expression): Note that new-expressions are not
	allowed in integral constant expressions.
	(cp_parser_delete_expression): Likewise.

2004-03-12  Matt Austern  <austern@apple.com>

	* decl2.c (maybe_make_one_only): Look at
	TARGET_EXPLICIT_INSTANTIATION_ONE_ONLY when deciding whether
	to make an explicit instantiation weak.
	* method.c (use_thunk): Make sure we call comdat_linkage
	when appropriate.
	* pt.c (do_type_instantiation): On systems where weak symbols
	don't go in a static archive's TOC, explicit instantiation of a
	class must imply *explicit* instantiation of its memeber.

2004-03-11  Kazu Hirata  <kazu@cs.umass.edu>

	* call.c, cp-tree.h, pt.c: Fix comment typos.

2004-03-10  Mark Mitchell  <mark@codesourcery.com>

	PR c++/14510
	* decl.c (xref_tag): Disregard non-type declarations when
	looking up a tagged type.

2004-03-09  Nathan Sidwell  <nathan@codesourcery.com>

	PR c++/14397
	* call.c (convert_like_real): Build a const qualified temporary,
	when testing ctor access.

2004-03-09  Mark Mitchell  <mark@codesourcery.com>

	* call.c (initialize_reference): Fix typo.

2004-03-09  Giovanni Bajo  <giovannibajo@gcc.gnu.org>

	PR c++/14409
	* pt.c (determine_specialization): For member templates, match also
	constness.

	PR c++/14448
	* parser.c (cp_parser_initializer_clause): Fold initializer if it is
	non-dependent.
	* pt.c (tsubst_copy_and_build): Handle NOP_EXPRs.

2004-03-09  Mark Mitchell  <mark@codesourcery.com>

	PR c++/14230
	* call.c (initialize_reference): Handle initializers that are
	class-member access expressions applies to rvalues.

2004-03-09  Mark Mitchell  <mark@codesourcery.com>

	PR c++/14432
	* name-lookup.c (supplement_binding): Ignore functions that are
	marked DECL_ANTICIPATED.

2004-03-08  Mark Mitchell  <mark@codesourcery.com>

	PR c++/14401
	* class.c (check_field_decls): Complain about non-static data
	members of reference type in unions.  Propagate
	CLASSTYPE_REF_FIELDS_NEED_INIT and
	CLASSTYPE_READONLY_FIELDS_NEED_INIT from the types of non-static
	data members.
	* init.c (perform_member_init): Complain about mbmers with const
	type that are not explicitly initialized.

2004-03-08  Mark Mitchell  <mark@codesourcery.com>

	* class.c (check_methods): Don't use IDENTIFIER_ERROR_LOCUS.
	* cp-tree.h (DECL_INVALID_OVERRIDER_P): New macro.
	(lang_identifier): Remove implicit_decl and error_locus.
	(IDENTIFIER_IMPLICIT_DECL): Remove.
	(SET_IDENTIFIER_IMPLICTI_DECL): Likewise.
	(IDENTIFIER_ERROR_LOCUS): Likewise.
	(SET_IDENTIFIER_ERROR_LOCUS): Likewise.
	(TYPE_ASSEMBLER_NAME_STRING): Likewise.
	(TYPE_ASSEMBLER_NAME_LENGTH): Likewise.
	(implicitly_declare): Remove.
	* decl.c (warn_extern_redeclared_static): Remove check of
	IDENTIFIER_IMPLICIT_DECL.
	(duplicate_decls): Don't check IDENTIFIER_ERROR_LOCUS.
	(implicitly_declare): Remove.
	(grok_ctor_properties): Don't set IDENTIFIER_ERROR_LOCUS.
	(start_function): Don't check IDENTIFIER_IMPLICIT_DECL.
	(start_method): Don't check IDENTIFIER_ERROR_LOCUS.
	* lex.c (unqualified_name_lookup_error): Create a dummy VAR_DECL
	in the innermost scope, rather than at namespace scope.
	* name-lookup.c (push_local_binding): Give it external linkage.
	(pushdecl): Remove dead code.
	* name-lookup.h (push_local_binding): Declare it.
	* ptree.c (cxx_print_identifier): Don't print
	IDENTIFIER_IMPLICIT_DECL or IDENTIFIER_ERROR_LOCUS.
	* search.c (check_final_overrider): Use DECL_INVALID_OVERRIDER_P,
	not IDENTIFIER_ERROR_LOCUS.
	* typeck.c (build_function_call): Remove dead code.

2004-03-08  Jason Merrill  <jason@redhat.com>

	PR c++/13170
	* decl.c (xref_tag): Remove attribute handling.
	* cp-tree.h: Adjust prototype.
	* decl.c, parser.c, rtti.c: Adjust callers.
	* parser.c (cp_parser_class_head): Pass back attributes in the
	class head.
	(cp_parser_class_specifier): Adjust.

2004-03-08  Matt Austern  <austern@apple.com>

	PR debug/14079
	* name-lookup.c (add_decl_to_level): Add extern variables, as well
	as static, to static_decls array.

2004-03-05  Jason Merrill  <jason@redhat.com>

	* tree.c (list_hash_pieces): s/TYPE_HASH/TREE_HASH/.

2004-03-04  Geoffrey Keating  <geoffk@apple.com>

	* decl.c (grokfndecl): Update old incorrect comment.
	(grokvardecl): Diagnose C++ variables of type with no linkage.

2004-03-01  Mark Mitchell  <mark@codesourcery.com>

	PR c++/14369
	* pt.c (build_non_dependent_expr): Do not create a
	NON_DEPENDENT_EXPR for a THROW_EXPR.

2004-03-01  Gabriel Dos Reis  <gdr@integrable-solutions.net>

	PR c++/14369
	* error.c (dump_expr): Handle THROW_EXPR.

2004-03-01  Mark Mitchell  <mark@codesourcery.com>

	PR c++/14360
	* parser.c (cp_parser_postfix_expression): Do not perform Koenig
	lookup if ordinary name-lookup finds a non-function.
	* pt.c (tsubst_copy_and_build): Likewise.

	PR c++/14361
	* parser.c (cp_parser_late_parsing_default_args): Check that there
	are no extra tokens after the end of the default-argument
	expression.

2004-03-01  Mark Mitchell  <mark@codesourcery.com>

	PR c++/14324
	* lex.c (retrofit_lang_decl): Treat entities with no linkage as
	having C++ linkage for name-mangling purposes.

	PR c++/14260
	* parser.c (cp_parser_direct_declarator): Recognize constructor
	declarators that use a template-id to name the class being
	constructed.

	PR c++/14337
	* pt.c (tsubst_qualified_id): Handle dependent qualifying scopes.
	(tsubst_expr): Do not call tsubst_copy, even when
	processing_template_decl.

2004-03-01  Jeff Law  <law@redhat.com>

	* init.c (build_vec_delete_1): Convert 2nd argument to NE_EXPR to
	the proper type.

2004-02-29  Mark Mitchell  <mark@codesourcery.com>

	PR c++/14138
	* name-lookup.h (push_scope): Change prototype.
	* name-lookup.c (push_scope): Do not reenter the current class
	scope.
	* decl.c (grokfndecl): Check return code from push_scope before
	calling pop_scope.
	* decl2.c (check_classfn): Likewise.
	* parser.c (cp_parser_conversion_function_id): Likewise.
	(cp_parser_init_declarator): Likewise.
	(cp_parser_direct_declarator): Likewise.
	(cp_parser_class_specifier): Likewise.
	(cp_parser_class_head): Likewise.
	(cp_parser_lookup_name): Likewise.
	(cp_parser_constructor_declarator_p): Likewise.
	* pt.c (instantiate_class_template): Likewise.
	(resolve_typename_type): Likewise.

2004-02-29  Mark Mitchell  <mark@codesourcery.com>

	PR c++/14267
	* typeck.c (build_modify_expr): Remove more of the cast-as-lvalue
	extension.

	PR debug/12103
	* class.c (update_vtable_entry_for_fn): Do not go through
	covariance machinery if the type returned by an overrider is the
	same as the original.

2004-02-29  Kazu Hirata  <kazu@cs.umass.edu>

	* call.c: Fix a comment typo.

2004-02-27  Ziemowit Laski  <zlaski@apple.com>

	* tree.c (pod_type_p): Treat VECTOR_TYPEs as PODs.

2004-02-26  Mark Mitchell  <mark@codesourcery.com>

	PR c++/14278
	* parser.c (cp_parser_parameter_declaration_list): Commit
	to fewer tentative parses.

2004-02-26  Giovanni Bajo  <giovannibajo@gcc.gnu.org>

	PR c++/14284
	* pt.c (dependent_type_p_r): A template template parameter is a
	dependent type.

2004-02-26  Giovanni Bajo  <giovannibajo@gcc.gnu.org>

	PR c++/14246
	* mangle.c (write_template_arg_literal): Don't rely on identity for
	boolean constants.

2004-02-24  Jason Merrill  <jason@redhat.com>

	* tree.c (build_exception_variant): Use check_qualified_type.

2004-02-23  Zack Weinberg  <zack@codesourcery.com>
	    Kazu Hirata  <kazu@cs.umass.edu>

	* decl.c (cxx_init_decl_processing): Don't check
	flag_writable_strings.

2004-02-23  Andrew Pinski  <pinskia@physics.uc.edu>

	PR c++/14156
	* typeck.c (maybe_warn_about_returning_address_of_location):
	Change check for VAR_DECL to use DECL_P instead.

2004-02-23  Giovanni Bajo  <giovannibajo@gcc.gnu.org>

	PR c++/14250
	* cvt.c (build_expr_type_conversion): Type must be complete before
	looking up for conversions.

2004-02-23  Giovanni Bajo  <giovannibajo@gcc.gnu.org>

	PR c++/14143
	* name-lookup.c	(arg_assoc_class): Don't look into template
	arguments if it is not a primary template.

2004-02-20  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>

	PR c++/12007
	* method.c (use_thunk): Always clone function argument tree.

2004-02-20  Mark Mitchell  <mark@codesourcery.com>

	PR c++/14199
	* pt.c (tsubst_copy): Call mark_used for a PARM_DECL.

	PR c++/14173
	* semantics.c (begin_class_definition): Set TYPE_PACKED correctly
	for all type variants.

2004-02-19  Mark Mitchell  <mark@codesourcery.com>

	PR c++/13927
	* decl.c (duplicate_decls): Return error_mark_node for invalid
	redeclarations.
	* name-lookup.c (push_namespace): Ignore the return value from
	pushdecl.
	* pt.c (push_template_decl_real): Robustify.

	PR c++/14186
	* name-lookup.c (push_class_level_binding): Do not complain about
	adding a binding for a member whose name is the same as the
	enclosing class if the member is located in a base class of the
	current class.

2004-02-19  Giovanni Bajo  <giovannibajo@gcc.gnu.org>

	PR c++/14181
	* parser.c (cp_parser_new_expression): Parse an ill-formed
	direct-new-declarator after a parenthesized type-id to emit good
	diagnostic.

2004-02-18  Kazu Hirata  <kazu@cs.umass.edu>

	* cp-tree.def, cvt.c: Update copyright.

2004-02-17  Mark Mitchell  <mark@codesourcery.com>

	PR c++/11326
	* cp-tree.h (abi_version_at_least): Remove.
	* mangle.c: Include flags.h.

2004-02-15  Mark Mitchell  <mark@codesourcery.com>

	PR c++/13971
	* call.c (build_conditional_expr): Handle conversions between
	class types which result in differently cv-qualified type
	variants.

	PR c++/14086
	* class.c (delete_duplicate_fields_1): Remove.
	(delete_duplicate_fields): Likewise.
	(finish_struct_anon): Remove check for members with the same name
	as their enclosing class.
	(check_field_decls): Do not call duplicate_fields.
	* decl.c (grokdeclarator): Remove check for static data members
	with the same name as their enclosing class.
	* name-lookup.c (push_class_level_binding): Check for members with
	the same name as their enclosing class.

2004-02-15  Gabriel Dos Reis  <gdr@integrable-solutions.net>

	PR c++/14085
	* error.c (dump_decl): Handle TEMPLATE_TYPE_PARM.

2004-02-14  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>

	PR c++/13635
	* pt.c (push_template_decl_real): Make sure DECL_TI_ARGS of DECL
	has full set of arguments.

2004-02-13  Giovanni Bajo  <giovannibajo@gcc.gnu.org>

	PR c++/13927
	* error.c (dump_decl) <ALIAS_DECL>: Dump as simple declarations.

2004-02-13  Mark Mitchell  <mark@codesourcery.com>

	PR c++/14122
	* cp-tree.h (delete_sanity): Change prototype.
	* decl2.c (delete_sanity): Make doing_vec a bool, not an int.
	Remove dead code.  Adjust code to warn about deleting an array.
	* typekc.c (decay_conversion): Use build_address and build_nop.

	PR c++/14108
	* search.c (accessible_p): Do not check access in thunks.

	PR c++/14083
	* call.c (build_conditional_expr): Call force_rvalue on the
	non-void operand in the case that one result is a throw-expression
	and the other is not.

2004-02-13  Ian Lance Taylor  <ian@wasabisystems.com>

	PR c++/9851
	* parser.c (cp_parser_pseudo_destructor_name): Check for errors on
	the type name and look ahead for ::~, and bail out early with a
	better error message if the parse is going to fail.

2004-02-12  Mark Mitchell  <mark@codesourcery.com>

	* call.c (conversion_kind): New type.
	(conversion_rank): Likewise.
	(conversion): Likewise.
	(CONVERSION_RANK): New macro.
	(conversion_obstack): New variable.
	(obstack_initialized): Likewise.
	(z_candidate): Change type of convs and second_conv.
	(candidate_warning): New type.
	(IDENTITY_RANK): Remove.
	(EXACT_RANK): Likewise.
	(PROMO_RANK): Likewise.
	(STD_RANK): Likewise.
	(PBOOL_RANK): Likewise.
	(USER_RANK): Likewise.
	(ELLIPSIS_RANK): Likewise.
	(BAD_RANK): Likewise.
	(ICS_RANK): Likewise.
	(ICS_STD_RANK): Likewise.
	(ICS_USER_FLAG): Likewise.
	(ICS_ELLIPSIS_FLAG): Likewise.
	(ICS_THIS_FLAG): Likewise.
	(ICS_BAD_FLAG): Likewise.
	(NEED_TEMPORARY_P): Likewise.
	(CHECK_COPY_CONSTRUCTOR_P): Likewise.
	(USER_CONV_CAND): Likewise.
	(USER_CONV_FN): Likewise.
	(conversion_obstack_alloc): New function.
	(alloc_conversion): Likewise.
	(validate_conversion_obstack): Likewise.
	(alloc_conversions): Likewise.
	(build_conv): Adjust to deal with new conversion data structures.
	(build_identity_conv): New function.
	(build_ambiguous_conv): Likewise.
	(standard_conversion): Adjust to deal with new conversion data
	structures.
	(convert_class_to_reference): Likewise.
	(direct_reference_binding): Likewise.
	(reference_binding): Likewise.
	(implicit_conversion): Likewise.
	(add_candidate): Likewise.
	(add_function_candidate): Likewise.
	(add_conv_candidate): Likewise.
	(build_builtin_candidate): Likewise.
	(print_z_candidate): Likewise.
	(merge_conversion_sequences): Likewise.
	(build_user_type_conversion_1): Likewise.
	(build_user_type_conversion): Likewise.
	(build_new_function_call): Likewise.
	(build_object_call): Likewise.
	(conditional_conversion): Likewise.
	(build_conditional_expr): Likewise.
	(build_new_op): Likewise.
	(build_op_delete_call): Likewise.
	(convert_like_real): Likewise.
	(build_over_call): Likewise.
	(build_new_method_call): Likewise.
	(is_subseq): Likewise.
	(maybe_handle_implicit_object): Likewise.
	(maybe_handle_ref_bind): Likewise.
	(compare_ics): Likewise.
	(source_type): Likewise.
	(add_warning): Likewise.
	(joust): Likewise.
	(can_convert_arg): Likewise.
	(can_convert_arg_bad): Likewise.
	(perform_implicit_conversion): Likewise.
	(perform_direct_initialization_if_possible): Likewise.
	(initialize_reference): Likewise.
	* cp-lang.c (cp_tree_size): Do not handle WRAPPER.
	* cp-tree.def (WRAPPER): Likewise.
	(IDENTITY_CONV): Remove.
	(LVALUE_CONV): Likewise.
	(QUAL_CONV): Likewise.
	(STD_CONV): Likewise.
	(PTR_CONV): Likewise.
	(PMEM_CONV): Likewise.
	(BASE_CONV): Likewise.
	(REF_BIND): Likewise.
	(USER_CONV): Likewise.
	(AMBIG_CONV): Likewise.
	(RVALUE_CONV): Likewise.
	* cp-tree.h (tree_wrapper): Remove.
	(WRAPPER_ZC): Remove.
	(lang_tree_node): Remove wrapper.
	(LOOKUP_SPECULATIVELY): Remove.
	(build_op_delete_call): Adjust prototype.
	(validate_conversion_obstack): Declare.
	(build_zc_wrapper): Remove.
	* cvt.c (convert_to_reference): Remove dead code.
	(ocp_convert): Likewise.
	* decl.c (redeclaration_error_message): Correct handling of
	templates.
	(finish_destructor_body): Do not use LOOKUP_SPECULATIVELY.
	(cp_tree_node_structure): Remove WRAPPER case.
	* decl2.c (finish_file): Call validate_conversion_obstack.
	* init.c (build_new_1): Remove use of LOOKUP_SPECULATIVELY.
	(build_op_delete_call): Likewise.
	(build_x_delete): Likewise.
	(build_delete): Adjust call to build_op_delete_call.
	* pt.c (tsubst_friend_declaration): Adjust code to determine
	whether or not a friend template is a definition.
	(tsubst_decl): Clear DECL_INITIAL for new FUNCTION_DECLs.
	* tree.c (build_zc_wrapper): Remove.

2004-02-12  Zack Weinberg  <zack@codesourcery.com>

	* cp-lang.c: Don't define LANG_HOOKS_BUILTIN_TYPE_DECLS.
	* cp-tree.h: Don't declare cxx_builtin_type_decls.
	* decl.c (builtin_type_decls, cxx_builtin_type_decls): Delete.
	(record_builtin_type): Call debug_hooks->type_decl on the TYPE_DECL.

2004-02-10  Mark Mitchell  <mark@codesourcery.com>

	* typeck.c (lookup_destructor): Fix typo in error message.

2004-02-09  Kazu Hirata  <kazu@cs.umass.edu>

	* call.c, parser.c, tree.c: Fix comment typos.

2004-02-07  Zack Weinberg  <zack@codesourcery.com>

	Bug 13856
	* optimize.c (maybe_clone_body): Don't update DECL_ESTIMATED_INSNS.
	* decl.c (duplicate_decls, start_function): Likewise.

2004-02-07  Zack Weinberg  <zack@codesourcery.com>

	* name-lookup.c (pushdecl): Issue shadow warnings directly.
	* parser.c (free_parser_stacks): Delete.

2004-02-07  Kazu Hirata  <kazu@cs.umass.edu>

	* rtti.c: Update copyright.

2003-02-06  Giovanni Bajo  <giovannibajo@gcc.gnu.org>

	PR c++/14033
	* decl.c (require_complete_types_for_parms): Do not insert
	error_mark_node in the parameter list.

2003-02-06  Giovanni Bajo  <giovannibajo@gcc.gnu.org>

	PR c++/14028
	* parser.c (cp_parser_enclosed_template_argument_list): Emit straight
	error when terminator can not be found.

2004-02-05  Kelley Cook  <kcook@gcc.gnu.org>

	Make-lang.in (po-generated):  Delete.

2004-02-05  Kazu Hirata  <kazu@cs.umass.edu>

	* call.c (type_passed_as): Replace PROMOTE_PROTOTYPES with
	targetm.calls.promote_prototypes.

2004-02-05  Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>

	PR middle-end/13750
	Revert:
	2004-01-15  Geoffrey Keating  <geoffk@apple.com>
	PR pch/13361
	* cp/lex.c (handle_pragma_interface): Duplicate string from tree.
	(handle_pragma_implementation): Likewise.

2004-02-05  Mark Mitchell  <mark@codesourcery.com>

	PR c++/13714
	* typeck.c (lookup_destructor): Tweak error message.

2004-02-05  Jan Hubicka  <jh@suse.cz>

	* tree.c (cp_cannot_inline_tree_fn):  Allow inlining of comdat
	functions.

2003-02-05  Giovanni Bajo  <giovannibajo@gcc.gnu.org>

	PR c++/14008
	* parser.c (cp_parser_diagnose_invalid_typename): Removed parsing
	code, only emits the diagnostic now. Added lookup of the identifier
	and support for qualified ids.
	(cp_parser_parse_and_diagnose_invalid_type_name): New function.
	Parse an (invalid) type name as id-expression within a declarator.
	(cp_parser_simple_declaration): Use it.
	(cp_parser_member_declaration): Likewise.
	(cp_parser_make_typename_type): New function. Handle errors through
	cp_parser_diagnose_invalid_typename.
	(cp_parser_elaborated_type_specifier): Use it.

2004-02-04  Mark Mitchell  <mark@codesourcery.com>

	PR c++/13932
	* call.c (convert_like_real): Use "converting" rather than
	"argument" as the descriptive keyword to
	dubious_conversion_warnings.
	* typeck.c (convert_for_assignment): Do not call
	dubious_conversion_warnings.

2004-02-04  Giovanni Bajo  <giovannibajo@gcc.gnu.org>

	PR c++/13086
	* init.c (build_delete): Emit a more informative error message in
	case of an incomplete type, and on the correct source line.

2004-02-04  Kazu Hirata  <kazu@cs.umass.edu>

	* error.c, search.c: Update copyright.

2004-02-04  Mark Mitchell  <mark@codesourcery.com>

	PR c++/9941
	* rtti.c (tinfo_base_init): Use import_export_tinfo to decide the
	linkage for the typeinfo name string.

2004-02-04  Mark Mitchell  <mark@codesourcery.com>

	PR c++/13969
	* cp-tree.h (fold_non_dependent_expr): New function.
	* parser.c (cp_parser_fold_non_dependent_expr): Remove.
	(cp_parser_template_argument): Use fold_non_dependent_expr.
	(cp_parser_direct_declarator): Likewise.
	* pt.c (fold_non_dependent_expr): New function.
	(convert_nontype_argument): Use it.
	(tsubst_qualified_id): Simplify.
	(tsubst_copy_and_build): Likewise.

2004-02-04  Mark Mitchell  <mark@codesourcery.com>

	* decl.c (cxx_push_function_context): Do not set
	current_function_is_thunk.
	* method.c (use_thunk): Set CALL_FROM_THUNK on the call to the
	actual function.

2003-02-04  Giovanni Bajo  <giovannibajo@gcc.gnu.org>

	PR c++/13997
	* pt.c (more_specialized_class): Increase processing_template_decl
	while partial ordering.

2004-02-03  Mark Mitchell  <mark@codesourcery.com>

	PR c++/13925
	* decl.c (start_function): Do not call pushdecl for any
	instantiation or specialization of a primary template.

2004-02-03  Mark Mitchell  <mark@codesourcery.com>

	PR c++/13950
	* parser.c (cp_parser_class_name): Robustify.

	PR c++/13970
	* parser.c (cp_parser_cache_group): Do not consume the EOF token.

	PR c++/14002
	* semantics.c (finish_id_expression): Do not return an
	IDENTIFIER_NODE when lookup finds a PARM_DECL.

2004-02-03  Mark Mitchell  <mark@codesourcery.com>

	PR c++/13978
	* pt.c (build_non_dependent_expr): Do not build
	NON_DEPENDENT_EXPRs for FUNCTION_DECLs or TEMPLATE_DECLs.

	PR c++/13968
	* semantics.c (finish_id_expression): Do not return an
	IDENTIFIER_NODE when lookup finds a VAR_DECL.

	PR c++/13975
	* parser.c (cp_parser_simple_declaration): When skipping to the
	end of the statement swallow the terminating semicolon.

2004-02-02  Mark Mitchell  <mark@codesourcery.com>

	PR c++/13113
	* init.c (build_offset_ref): Improve error recovery for invalid
	uses of non-static member functions.

	PR c++/13854
	* cp-tree.h (cp_build_type_attribute_variant): New function.
	* class.c (build_clone): Use cp_build_type_attribute_variant.
	* decl.c (duplicate_decls): Likewise.
	* pt.c (copy_default_args_to_explicit_spec): Likewise.
	(tsubst_function_type): Likewise.
	* tree.c (build_exception_variant): Check attributes before
	concluding that two types are the same.
	(cp_build_type-attribute_variant): New method.
	* typeck.c (merge_types): Use cp_build_type_attribute_variant.

	PR c++/13907
	* call.c (convert_class_to_reference): Keep better track of
	pedantically invalid user-defined conversions.

2004-02-01  Giovanni Bajo  <giovannibajo@gcc.gnu.org>

	PR c++/13957
	* pt.c (tsubst_qualified_id): Improved error message when a type
	is expected but	not found.

2004-01-31  Kazu Hirata  <kazu@cs.umass.edu>

	* class.c: Fix comment typos.
	* decl.c: Likewise.
	* error.c: Likewise.
	* parser.c: Likewise.
	* pt.c: Likewise.
	* search.c: Likewise.
	* typeck.c: Likewise.

2004-01-30  Richard Henderson  <rth@redhat.com>

	PR c++/13693
	* method.c (use_thunk): Don't force_target_expr for void thunks.
	* tree.c (build_target_expr_with_type): Assert non-void type.
	(force_target_expr): Likewise.

2004-01-30  Michael Matz  <matz@suse.de>

	* parser.c (cp_parser_labeled_statement): Accept case ranges.

2004-01-30  Giovanni Bajo  <giovannibajo@gcc.gnu.org>

	DR206
	PR c++/13813
	* decl.c (grokdeclarator): Check immediatly type completeness for
	non-dependent types.

2004-01-30  Giovanni Bajo  <giovannibajo@gcc.gnu.org>

	PR c++/13683
	* call.c (convert_arg_to_ellipsis): Don't emit a warning if within
	a sizeof expression.block

2004-01-29  Mark Mitchell  <mark@codesourcery.com>

	PR c++/13883
	* mangle.c (write_encoding): Correct encoding of member template
	constructors.

2004-01-28  Giovanni Bajo  <giovannibajo@gcc.gnu.org>

	* parser.c (cp_parser_template_id): Parse tentatively `[:' after a
	template name as it was `<::' (digraph typo).
	(cp_parser_nth_token_starts_template_argument_list_p): New function.
	(cp_parser_id_expression): Use it.
	(cp_parser_nested_name_specifier_opt): Likewise.
	(cp_parser_template_name): Likewise.
	(cp_parser_class_name): Likewise.
	(cp_lexer_get_preprocessor_token): Use c_lex_with_flags.

2004-01-28  Mark Mitchell  <mark@codesourcery.com>

	PR c++/13791
	* typeck.c (merge_types): Do not merge attributes into
	TYPENAME_TYPEs.

	PR c++/13736
	* parser.c (cp_parser_direct_declarator): Do not prevent
	backtracking inside a parenthesized declarator.
	(cp_parser_parameter_declaration): Fix typo in comment.

2004-01-28  Jan Hubicka  <jh@suse.cz>

	* semantics.c (expand_body)  Do emit_associated_thunks before
	expansion.

2004-01-27  Devang Patel  <dpatel@apple.com>

	* name-lookup.c: Include "debug.h"
	(do_namespace_alias): Invoke debug_hooks to emit debug info
	for namespace alias.
	(do_local_using_decl): Invoke debug_hooks to emit debug info
	for using decl.
	(do_class_using_decl): Same.
	(do_toplevel_using_decl): Same.
	(do_using_directive): Same.
	(cp_emit_debug_info_for_using): New function.
	* Make-lang.in (cp/parser.o): Depend on debug.h
	(cp/name-lookup.o): Same.

2004-01-26  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>

	* cp-tree.h (language_function, lang_type_header): Use
	BOOL_BITFIELD.
	* name-lookup.h (cp_binding_level): Likewise.

2004-01-26  Mark Mitchell  <mark@codesourcery.com>

	PR c++/13663
	* semantics.c (finish_for_expr): Check for unresolved overloaded
	functions.

	* class.c (add_method): Just check processing_template_decl to
	determine whether or not we are within a template.
	* decl2.c (maybe_retrofit_in_chrg): Likewise.
	* init.c (decl_constant_value): Check the type of the declaration,
	not TREE_READONLY.
	* name-lookup.c (maybe_push_to_top_level): Rename to ...
	(push_to_top_level): ... this.
	* name-lookup.h (maybe_push_to_top_level): Do not declare it.
	* pt.c (push_template_decl_real): Reorder condition for speed.
	(convert_template_argument): Use dependency-checking functions in
	place of uses_template_parms.
	(lookup_template_class): Avoid calling uses_template_parms more
	than once.
	(uses_template_parms): Reimplement, using dependency-checking
	functions.
	(instantiate_class_template): Use push_to_top_level, not
	maybe_push_to_top_level.
	(type_unification_real): Simplify.
	(type_dependent_expression_p): Handle OFFSET_REFs and
	TEMPLATE_DECLs.
	(any_dependent_template_arguments_p): Handle multiple levels of
	template argument.
	* semantics.c (expand_or_defer_fn): Do not check
	uses_template_parms for template instantiations.
	* typeck.c (comptypes): Avoid calling cp_type_quals.

2004-01-25  Mark Mitchell  <mark@codesourcery.com>

	PR c++/13833
	* call.c (build_over_call): Do not convert arguments when
	processing a template.
	* pt.c (build_non_dependent_expr): Do not build a
	NON_DEPENDENT_EXPR for arithmetic constants.

2004-01-25  Giovanni Bajo  <giovannibajo@gcc.gnu.org>

	PR c++/13810
	* parser.c (cp_parser_type_parameter): When cp_parser_id_expression
	returns a TYPE_DECL. no further lookup is required.
	* semantics.c (check_template_template_default_arg): A TYPE_DECL
	is invalid. Rework to give better diagnostics.

2004-01-25  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>

	PR c++/13797
	* pt.c (instantiate_class_template): Add an error_mark_node
	check.
	(tsubst_decl) <TEMPLATE_DECL case>: Likewise.

2004-01-23  Andrew Pinski  <pinskia@physics.uc.edu>

	PR c++/13701
	* decl.c (finish_function): Move the call to
	finish_fname_decls below the call to
	finish_eh_spec_block.

2004-01-21  Kazu Hirata  <kazu@cs.umass.edu>

	* optimize.c, typeck2.c: Update copyright.

2004-01-21  Kazu Hirata  <kazu@cs.umass.edu>

	* Make-lang.in, call.c, class.c, decl2.c, except.c, expr.c,
	init.c, mangle.c, typeck.c: Update copyright.

2004-01-21  Zdenek Dvorak  <rakdver@atrey.karlin.mff.cuni.cz>

	* parser.c (cp_parser_class_specifier): Prevent garbage collection.

2004-01-20  Kelley Cook  <kcook@gcc.gnu.org>

	* Make-lang.in: Replace $(docdir) with doc.
	(c++.info, c++.srcinfo): Dummy entry.
	(c++.man, c++.srcman): New rules.
	(c++.install-man): Revamp rule.

2004-01-20  Kelley Cook  <kcook@gcc.gnu.org>

	* Make-lang.in (CXX_INSTALL_NAME, GXX_INSTALL_NAME,
	CXX_TARGET_INSTALL_NAME, GXX_TARGET_INSTALL_NAME): Define via a
	immediate $(shell) instead of deferred backquote.

2004-01-19  Mark Mitchell  <mark@codesourcery.com>

	PR c++/13651
	* parser.c (cp_parser_postfix_expression): When encountering
	incomplete type on left-hand side of "->" or ".", treat the entire
	expression as erroneous.

	PR c++/13592
	* call.c (build_field_call): Remove.
	(n_build_method_call): Likewise.
	(build_method_call): Likewise.
	(build_new_method_call): Do not call build_field_call.
	* class.c (n_build_method_call): Remove.
	(print_class_statistics): Do not print it.
	* cp-tree.h (build_method_call): Remove declaration.
	(finish_object_call_expr): Likewise.
	(build_new_1): Do not use build_method_call.
	* parser.c (cp_parser_postfix_expression): Use finish_call_expr
	when the function appearing on the right-hand-side of "." or "->"
	is not actually a function.
	* pt.c (tsubst_copy_and_build): Likewise.
	* semantics.c (finish_object_call_expr): Remove.

2004-01-18  Mark Mitchell  <mark@codesourcery.com>

	PR c++/13710
	* pt.c (tsubst): Use finish_typeof.

2004-01-18  Jason Merrill  <jason@redhat.com>

	PR c++/11725
	* except.c (build_throw): In a template, set
	current_function_returns_abnormally.

2004-01-17  Fred Fish  <fnf@intrinsity.com>

	PR c++/11895
	* decl.c (reshape_init): Handle VECTOR_TYPE like ARRAY_TYPE,
	except don't call array_type_nelts() with a VECTOR_TYPE.

2004-01-16  Jan Hubicka  <jh@suse.cz>

	* mangle.c (write_mangled_name): Remove inline modifier.

2004-01-16  Mark Mitchell  <mark@codesourcery.com>

	PR c++/13574
	* decl.c (compute_array_index_type): Fix grammar in comment.
	* init.c (build_zero_init): Handle zero-sized arrays correctly.

	PR c++/13178
	* call.c (name_as_c_string): Print conversion operator names
	correctly.

	PR c++/13478
	* call.c (initialize_reference): Pass -1 for inner parameter to
	convert_like_real.

2004-01-15  Giovanni Bajo  <giovannibajo@gcc.gnu.org>

	PR c++/13407
	* parser.c (cp_parser_base_specifier): Check for an invalid
	keyword `typename' and emit an user-friendly error message.

2004-01-15  Geoffrey Keating  <geoffk@apple.com>

	PR pch/13361
	* cp/lex.c (handle_pragma_interface): Duplicate string from tree.
	(handle_pragma_implementation): Likewise.

2004-01-15  Giovanni Bajo  <giovannibajo@gcc.gnu.org>

	PR c++/9259
	* typeck.c (build_class_member_access_expr): Allow to access members
	of the currently open class.
	(finish_class_member_access_expr): Likewise.

2004-01-15  Alexandre Oliva  <aoliva@redhat.com>

	PR c++/13659
	* name-lookup.c (validate_nonmember_using_decl): Take scope and
	name by value, instead of computing them.
	(do_local_using_decl, do_toplevel_using_decl): Add scope and name
	arguments.  Pass them to validate_nonmember_using_decl.
	* name-lookup.h (do_local_using_decl): Adjust.
	(do_toplevel_using_decl): Likewise.
	* parser.c (cp_parser_using_declaration): Likewise.
	* pt.c (tsubst_expr): Likewise.

2004-01-15  Alexandre Oliva  <aoliva@redhat.com>

	PR c++/13594
	PR c++/13658
	* name-lookup.c (qualified_lookup_using_namespace): Search
	strongly-associated namespaces first, and only then try other
	namespaces.

2004-01-15  Kelley Cook  <kcook@gcc.gnu.org>

	* Make-lang.in (c++.srcextra): Dummy entry.

2004-01-15  Giovanni Bajo  <giovannibajo@gcc.gnu.org>

	PR c++/8856
	* parser.c (cp_parser_template_name): Don't try to parse a
	conversion-function-id, as it cannot be a template-name.
	(cp_parser_simple_type_specifier): Check for invalid template-ids
	even after a built-in type.

2004-01-14  Jan Hubicka  <jh@suse.cz>

	PR c++/12850
	* pt.c (instantiate_decl):  Do not increase function_depth.

2004-01-14  Danny Smith  <dannysmith@users,sourceforge.net>

	PR c++/9021
  	PR c++/11005
	* parser.c (cp_parser_elaborated_type_specifier): Warn about
	attributes and discard.
	* decl.c (xref_tag): Don't overwite existing attributes with
	NULL_TREE.

2004-01-14  Giovanni Bajo  <giovannibajo@gcc.gnu.org>

	PR c++/12335
	* parser.c (cp_parser_lookup_name): Return error_mark_node if there
	is no destructor while looking up a BIT_NOT_EXPR.

2004-01-13  Ian Lance Taylor  <ian@wasabisystems.com>

	* cxxfilt.c: Remove unused file.

2004-01-14  Jan Hubicka  <jh@suse.cz>

	Partial fix to PR c++/12850
	* decl2.c (mark_used): Do not proactively instantiate templates
	when compiling in unit-at-a-time or not optimizing.
	* optimize.c (maybe_clone_body): Do not increase function depth.

2004-01-13  Giovanni Bajo  <giovannibajo@gcc.gnu.org>

	PR c++/13474
	* pt.c (tsubst) <INTEGER_TYPE>: Remove obsolete array index tweaking.

2003-01-12  Steven Bosscher  <stevenb@suse.de>

	PR c++/13558
	* parser.c (cp_parser_member_declaration): Any non-type is also
	not a class or a function.

2004-01-12  Jason Merrill  <jason@redhat.com>

	PR c++/12815
	* class.c (build_base_path): Do not mark vtable references as
	TREE_CONSTANT.
	(build_vtbl_ref_1): Likewise.

2004-01-12  Richard Henderson  <rth@redhat.com>

	PR opt/10776
	* typeck2.c (split_nonconstant_init_1, split_nonconstant_init): New.
	(store_init_value): Use it.
	* decl.c (check_initializer): Expect full initialization code
	from store_init_value.
	* init.c (expand_aggr_init_1): Likewise.
	* decl2.c (maybe_emit_vtables): Abort if runtime init needed.

2004-01-12  Mark Mitchell  <mark@codesourcery.com>

	* class.c (layout_class_type): For non-POD class types, also copy
	the DECL_SIZE and DECL_MODE of fields to the base class type.

2004-01-12  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>

	PR c++/13289
	* pt.c (instantiate_decl): Set DECL_TEMPLATE_INSTANTIATED before
	calling regenerate_decl_from_template.

2004-01-12  Scott Brumbaugh  <scottb.lists@verizon.net>

	PR c++/4100
	* parser.c (cp_parser_decl_specifier_seq): Add check for a friend
	decl-specifier occurring along with a class definition.

2004-01-12  Ian Lance Taylor  <ian@wasabisystems.com>

	* parser.c (cp_parser_decl_specifier_seq): Add parenthetical
	clauses to comments describing declares_class_or_enum.
	(cp_parser_type_specifier): Set *declares_class_or_enum to 0, not
	false.

2004-01-12  Jan Hubicka  <jh@suse.cz>

	* pt.c (for_each_template_parm): Do not check for duplicates.
	(for_each_template_parm): Use walk_tree duplicate checking code.

2004-01-11  Ian Lance Taylor  <ian@wasabisystems.com>

	PR c++/3478
	* parser.c (cp_parser_decl_specifier_seq): If the first decl_spec
	is error_mark_node, don't add any more decl_specs.
	(cp_parser_init_declarator): After committing to a declaration, if
	the decl_specifiers start with error_mark_node, issue an error and
	change the type to "int".

2004-01-09  Nathanael Nerode  <neroden@gcc.gnu.org>

	PR bootstrap/7817
	* Make-lang.in: Copy gcc.1 to g++.1 rather than using .so.

2004-01-10  Giovanni Bajo  <giovannibajo@gcc.gnu.org>

	DR 337
	PR c++/9256
	* pt.c (tsubst): Substitution must fail if we are attempting to
	create an array with element type that is an abstract class type.
	* decl.c (cp_finish_decl): Strip pointers and array types recursively
	before calling abstract_virtuals_error.

2004-01-09  Alexandre Oliva  <aoliva@redhat.com>

	* name-lookup.c (qualified_lookup_using_namespace): Consider
	strong using directives even if we've already found a binding.

2004-01-09  Mark Mitchell  <mark@codesourcery.com>

	* cp-tree.h (cxx_expand_expr): Change prototype.
	* expr.c (cxx_expand_expr): Add alt_rtl parameter.

2004-01-08  Giovanni Bajo  <giovannibajo@gcc.gnu.org>

	PR c++/12573
	* pt.c (value_dependent_expression_p): Handle COMPONENT_REFs by
	looking into them recursively. They can be there because of the
	new __offsetof__ extension.

2004-01-07  Zack Weinberg  <zack@codesourcery.com>

	* parser.c (cp_parser_save_member_function_body): Mark the
	definition static.

2004-01-05  Mark Mitchell  <mark@codesourcery.com>

	PR c++/13057
	* class.c (build_clone): Copy type attributes from the original
	function to the clone.

	PR c++/12815
	* class.c (build_vtbl_ref_1): Do not unconditionally mark vtable
	references as constant.

	PR c++/12132
	* parser.c (cp_parser_explicit_instantiation): Improve error
	recovery.
	(cp_parser_require): Improve indication of the error location.

	PR c++/13451
	* parser.c (cp_parser_class_head): Reorder logic to check for
	invalid qualification.

2004-01-04  Mark Mitchell  <mark@codesourcery.com>

	PR c++/13157
	* name-lookup.c (lookup_using_namespace): Remove spacesp
	parameter.
	(unqualified_namespace_lookup): Likewise.
	(lookup_qualified_name): Adjust accordingly.
	(lookup_name_real): Likewise.
	(lookup_arg_dependent): Do not eliminate the namespace of the
	functions found by unqualified name lookup unless that is the
	current namespace.

2004-01-04  Andrew Pinski  <pinskia@physics.uc.edu>

	* semantics.c (push_deferring_access_checks): Fix format.
	(resume_deferring_access_checks): Likewise.
	(stop_deferring_access_checks): Likewise.
	(pop_deferring_access_checks): Likewise.
	(get_deferred_access_checks): Likewise.
	(pop_to_parent_deferring_access_checks): Likewise.
	(perform_deferred_access_checks): Likewise.
	(perform_or_defer_access_check): Likewise.

2004-01-04  Richard Henderson  <rth@redhat.com>

	* call.c (build_over_call): Don't create a save_expr of an
	aggregate, but rather its address.

2004-01-04  Mark Mitchell  <mark@codesourcery.com>

	PR c++/13529
	* parser.c (cp_parser_postfix_expression): Allow "." to appear in
	an offsetof expression.

	* parser.c (cp_parser_parameter_declaration): Fix comment.

	PR c++/12226
	* call.c (CHECK_COPY_CONSTRUCTOR_P): New macro.
	(reference_binding): Set it when appropriate.
	(build_temp): New function, split out from ...
	(convert_like_real): ... here.  Honor CHECK_COPY_CONSTRUCTOR_P.
	(initialize_reference): Likewise.

	PR c++/13536
	* parser.c (cp_parser): Add in_type_id_in_expr_p.
	(cp_parser_new): Initialize it.
	(cp_parser_postfix_expression): Set it.
	(cp_parser_sizeof_operand): Likewise.
	(cp_parser_parameteR_declaration): Do not commit early to tenative
	parsers when in_type_id_in_expr_p is set.

2004-01-03  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>

	PR c++/13094
	* parser.c (cp_parser_template_argument): Don't call
	make_unbound_class_template directly.
	(cp_parser_lookup_name): Don't extract TEMPLATE_DECL from
	UNBOUND_CLASS_TEMPLATE tree node.

2004-01-02  Richard Sandiford  <rsandifo@redhat.com>

	PR target/12729
	* method.c (use_thunk): Pass the CALL_EXPR through force_target_expr.

2004-01-02  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>

	PR c++/13520
	* cp-tree.h (DECL_UNBOUND_CLASS_TEMPLATE_P): New macro.
	(DECL_FUNCTION_TEMPLATE_P): Use it.
	(DECL_CLASS_TEMPLATE_P): Likewise.
	* parser.c (cp_parser_lookup_name): Add is_template parameter.
	(cp_parser_type_parameter): Adjust call to cp_parser_lookup_name.
	(cp_parser_template_name): Likewise.
	(cp_parser_elaborated_type_specifier): Likewise.
	(cp_parser_namespace_name): Likewise.
	(cp_parser_class_name): Likewise.
	(cp_parser_lookup_name_simple): Likewise.

See ChangeLog.3 for earlier changes.
